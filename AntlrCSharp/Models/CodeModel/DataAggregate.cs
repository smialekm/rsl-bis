///////////////////////////////////////////////////////////
//  DataAggregate.cs
//  Implementation of the Class DataAggregate
//  Generated by Enterprise Architect
//  Created on:      23-sty-2024 15:01:54
//  Original author: smial
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Linq;

namespace CodeModel {
	public class DataAggregate : NamedElement {
		public List<DataItem> fields = new List<DataItem>();
		public CheckEnumeration enumer = null;

		public string GetElemName(){
			return Utils.ToPascalCase(name);
		}

		public string GetVarName(){
			return Utils.ToCamelCase(name);
		}

        public string ToHtml(bool editable, int tabs = 0, int hLevel = 3, string parentPath = null){
 			string ts = Utils.GetTabString(tabs);
			string varName = null == parentPath ? GetVarName() : parentPath;
            string code = "";
			if (3 >= hLevel)
				code += ts + "<h" + hLevel + ">" + name + "</h" + hLevel+ ">\n";
			foreach (DataItem item in fields)
				code += item.ToHtml(varName, editable, tabs + 1, hLevel + 1);
			return code;
        }

		public string ToHtmlTable(bool editable, string parentPath, int tabs = 0) {
 			string ts = Utils.GetTabString(tabs);
			string code = ts + "<table className=\"table table-striped table-bordered\">\n";
			code += ts + "\t<thead>\n"+ ts + "\t\t<tr>\n";
			if (editable) code += ts + "\t\t\t<th></th>\n";
			code += string.Join("", fields.Select(f => (TypeKind.Primitive == f.typeKind) ? ts + "\t\t\t<th>" + f.name + "</th>\n" : ""));
			code += ts + "\t\t</tr>\n" + ts + "\t</thead>\n";
			code += ts + "\t<tbody>\n";
			string baseParentPath = editable ? "base" + parentPath[..1].ToUpper() + parentPath[1..] : parentPath;
			code += ts + "\t\t{viewState." + baseParentPath + " &&\n";
			code += ts + "\t\t viewState." + baseParentPath + ".map((value,index) => (\n";
			code += ts + "\t\t\t<tr key={index}>\n";
			if (editable) {
				string nts = Utils.GetTabString(tabs + 4);
				code += nts + "<td>\n" + nts + "\t<input\n";
				code += nts + "\t\ttype=\"checkbox\"\n";
                code += nts + "\t\tid={index.toString()}\n";
                code += nts + "\t\tonChange={(e) => {\n";
				nts = Utils.GetTabString(tabs + 7);
                code += nts + "e.target.checked\n";
                code += nts + "\t? viewState." + parentPath + ".push(\n";
                code += nts + "\t\t\tviewState." + baseParentPath + "[index]\n";
                code += nts + "\t\t)\n";
                code += nts + "\t: viewState." + parentPath + ".splice(\n";
                code += nts + "\t\t\tviewState." + parentPath + ".indexOf(\n";
                code += nts + "\t\t\t\tviewState." + baseParentPath + "[index]\n";
                code += nts + "\t\t\t), 1\n";
            	code += nts + "\t\t);\n";
				code += nts + "viewState." + GetVarName() + " =\n";
				code += nts + "\t1 == viewState." + parentPath + ".length\n";
                code += nts + "\t\t? viewState." +baseParentPath + "[0]\n";
                code += nts + "\t\t: undefined;\n";
				nts = Utils.GetTabString(tabs + 4);
                code += nts + "\t\t}}\n";
                code += nts + "\t/>\n";
                code += nts + "</td>\n";
			}
			code += string.Join("", fields.Select(f => (TypeKind.Primitive == f.typeKind) ? ts + "\t\t\t\t<td>{value." + f.name + 
									("text" != f.type ? ".toString()" : "") + "}</td>\n" : ""));
			code += ts + "\t\t\t</tr>\n" + ts + "\t\t))}\n";
			code += ts + "\t</tbody>\n";
			code += ts + "</table>\n";
			return code;
		}

		public string ToCode(int tabs){
			string ts = Utils.GetTabString(tabs);
            string code = ts + "export class " + GetElemName() + " {\n";
			code += string.Join("", fields.Select(di => di.ToCode(tabs+1) + "\n"));
			code += ts + "}\n";
			return code;
		}

        public DataAggregate(){}
	}
}