///////////////////////////////////////////////////////////
//  PresenterClass.cs
//  Implementation of the Class PresenterClass
//  Generated by Enterprise Architect
//  Created on:      23-sty-2024 15:01:55
//  Original author: smial
///////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Linq;
namespace CodeModel {
	public class PresenterClass : ClassFileGenerator {
		public List<POperation> methods = new List<POperation>();

		public PresenterClass(){}

        public override string GetElemName(){
            return "P" + Utils.ToPascalCase(name);
        }

        public override string GetVarName(){
            return "p" + Utils.ToPascalCase(name);
        }

        public override string ToCode(int tabs){
		    string ts = Utils.GetTabString(tabs);
            // export function updateClwView(state: ClientListWndData, action: ActionId) {
            string code = ts + "export function update" + Utils.ToPascalCase(name) + "(";
            code += "state: " + Utils.ToPascalCase(name) + "State, action: ActionID) {\n";
            //   let newState = { ...state };
            code += ts + "\tlet newState = { ...state };\n";
            //   return newState;
            code += ts + "\treturn newState;\n" + ts + "}\n\n";
            // }

            // CODE: export class PClientListWnd extends PresentationDispatcher {
            code += ts + "export class " + GetElemName() + " extends PresentationDispatcher {\n";
            //   CODE: state!: ClientListWndData;
            code += ts + "\tstate!: " + Utils.ToPascalCase(name) + "State;\n";
            //   CODE: updateView!: Dispatch<ActionId>;
            code += ts + "\tupdateView!: Dispatch<ActionId>;\n\n";

            code += ts + "\tinjectStateHandle(state: " + Utils.ToPascalCase(name) + "State, updateView: Dispatch<ActionID>) {\n";
            code += ts + "\t\tthis.state = state;\n";
            code += ts + "\t\tthis.updateView = updateView;\n";
            code += ts + "\t}\n\n";

            code += string.Join("\n", methods.Select(m => m.ToCode(tabs + 1)+"\n"));

            code += ts + "}";

            return code;
        }

        protected override string GetFileName(){
            return "P " + name;
        }
    }
}