///////////////////////////////////////////////////////////
//  ServiceInterface.cs
//  Implementation of the Class ServiceInterface
//  Generated by Enterprise Architect
//  Created on:      23-sty-2024 15:01:55
//  Original author: smial
///////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Linq;
namespace CodeModel {
	public class ServiceInterface : ClassFileGenerator {
		public List<SOperation> signatures = new List<SOperation>();

		public ServiceInterface(){}

        public override string GetElemName(){
            return "I" + Utils.ToPascalCase(name);
        }

        public override string GetVarName(){
            return "i" + Utils.ToPascalCase(name);
        }

        public string GetSvcName(){
            return Utils.ToPascalCase(name) + "Proxy";
        }

        private string GetImports(){
            string code = "import { ";
            List<string> dataObjects = new List<string>();
            foreach (SOperation sig in signatures){
                List<string> types = new List<string>(){"bigint", "boolean"};
                if (null != sig.returnType && !types.Contains(sig.returnType)) dataObjects.Add(sig.GetReturnTypeElemName());
                foreach (Parameter par in sig.parameters) {
                    string name = par.ToTypeCode();
                    if (!dataObjects.Contains(name)) dataObjects.Add(name);
                }
            }
            code += string.Join(", ", dataObjects);
            code += " } from \"../viewmodel/ViewModel\";\n";
            
            return code + "\n";
        }

        public override string ToCode(int tabs){
            string ts = Utils.GetTabString(tabs);
            string code = GetImports();
            code += ts + "export interface " + GetElemName() + " {\n";
            code += string.Join("", signatures.Select(x => x.ToCode(tabs + 1) + ";\n"));
            code += ts + "}\n\n";

            code += ts + "export class " + GetSvcName() + " implements " + GetElemName() + "{\n\n";
            code += string.Join("", signatures.Select(x => x.ToCode(tabs + 1) + x.ToBodyCode(tabs + 1)));
            code += ts + "}\n\n";
            return code;
        }

        protected override string GetFileName()
        {
            return "I " + name;
        }
    }
}