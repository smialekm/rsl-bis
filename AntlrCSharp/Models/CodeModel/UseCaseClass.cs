///////////////////////////////////////////////////////////
//  UseCaseClass.cs
//  Implementation of the Class UseCaseClass
//  Generated by Enterprise Architect
//  Created on:      23-sty-2024 15:01:55
//  Original author: smial
///////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
namespace CodeModel {
	public class UseCaseClass : ClassFileGenerator {
		public List<UCOperation> methods = new List<UCOperation>();
		public List<PresenterClass> presenters = new List<PresenterClass>();
		public List<ServiceInterface> services = new List<ServiceInterface>();
        public List<DataAggregate> attrs = new List<DataAggregate>();
        public List<UseCaseClass> invoked = new List<UseCaseClass>();

		public UseCaseClass(){}

        public override string GetElemName(){
            return "UC" + Utils.ToPascalCase(name);
        }

        public override string GetVarName(){
            return Utils.ToCamelCase(name);
        }

        public string GetParams(){
            return string.Join(", ", 
                            Enumerable.Concat<FileGenerator>(presenters, services).
                                ToList().Select(p => (p is PresenterClass pr) ? pr.GetVarName() : ((ServiceInterface) p).GetVarName()));
        }

        private string GetImports(){
            List<string> dataObjects = new List<string>();
            List<string> types = new List<string>(){"Bigint", "Boolean", "Any"};
            foreach (UCOperation cop in methods){
                foreach (Instruction instr in cop.instructions){
                    if (instr is Call call && null != call.operation.returnType) {
                        string name = Utils.ToPascalCase(call.operation.returnType).Replace("!","");
                        if (!dataObjects.Contains(name) && !types.Contains(name)) dataObjects.Add(name);
                    } else if (instr is End) {
                        string resultEnum = Utils.ToPascalCase(name) + "ResultEnum";
                        if (!dataObjects.Contains(resultEnum)) dataObjects.Add(resultEnum);
                    }
                }
                foreach (Parameter par in cop.parameters) {
                    string name = par.ToTypeCode();
                    if (!dataObjects.Contains(name) && !types.Contains(name)) dataObjects.Add(name);
                }
                foreach (DataAggregate attr in attrs) {
                    string name = attr.GetElemName();
                    if (!dataObjects.Contains(name) && !types.Contains(name)) dataObjects.Add(name);
                }
            }
            string code = "import { " + string.Join(", ", dataObjects);
            code += " } from \"../viewmodel/ViewModel\";\n";

            foreach (PresenterClass presenter in presenters)
                code += "import { " + presenter.GetElemName() + " } from \"../view/presenters/" + presenter.GetElemName() + "\";\n";
            foreach (ServiceInterface service in services)
                code += "import { " + service.GetElemName() + " } from \"../services/" + service.GetElemName() + "\";\n";
            foreach (UseCaseClass inv in invoked)
                code += "import { " + inv.GetElemName() + " } from \"./" + inv.GetElemName() + "\";\n";
            return code + "\n";
        }

        public override string ToCode(int tabs){
 			string ts = Utils.GetTabString(tabs);
            string code = GetImports();
            // CODE: export class UCShowClientList {
            code += ts + "export class " + GetElemName() + "{\n";
            //   CODE: pClientListWindow: PClientListWnd;
            code += 0 == presenters.Count ? "" : 
                    string.Join("", presenters.Select(p => "\t" + ts + p.GetVarName() + ": " + p.GetElemName() + ";\n")) + "\n";
            //   CODE: iCl: IClients;
            code += 0 == services.Count ? "" :
                    string.Join("", services.Select(s => "\t" + ts + s.GetVarName() + ": " + s.GetElemName() + ";\n")) + "\n";
            code += 0 == invoked.Count ? "" :
                    string.Join("", invoked.Select(s => "\t" + ts + s.GetVarName() + ": " + s.GetElemName() + " | undefined;\n")) + "\n";
            //   CODE: returnTo: Function = new Function();
            code += ts + "\treturnTo?: Function;\n";
            code += ts + "\treturnUc?: any;\n\n";
            //   CODE: clientType: ClientType;
            code += 0 == attrs.Count ? "" :
                    string.Join("", attrs.Select(a => "\t" + ts + a.GetVarName() + ": " + a.GetElemName() + 
                    " = new " + a.GetElemName() + "();\n")) + "\n";
            //   CODE: constructor(clw: PClientListWnd, mm: PMainMenu, cl: IClients) {
            code += "\t" + ts + "constructor(";
            code += string.Join(", " + ts, presenters.Select(p => p.GetVarName() + ": " + p.GetElemName()));
            if (services.Count > 0)
                code += ", " + string.Join(", " + ts, services.Select(s => s.GetVarName() + ": " + s.GetElemName()));
            code += ") {\n";
            //   CODE: this.pCLW = clw;
            code += string.Join("", presenters.Select(p => ts + "\t\tthis." + p.GetVarName() + " = " + p.GetVarName() + ";\n"));
            code += string.Join("", services.Select(s => ts + "\t\tthis." + s.GetVarName() + " = " + s.GetVarName() + ";\n"));
            //   CODE: }
            code += "\t" + ts + "}\n\n";
            code += string.Join("\n", methods.Select(m => m.ToCode(tabs + 1)));
            // CODE: }
            code += ts + "}";
            return code;
        }

        protected override string GetFileName(){
            return "UC " + name;
        }
    }
}