//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/smial/MyRepos/rsl-bis/AntlrCSharp/RslBis.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class RslBisParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		NUMBER=39, CHAR=40, STRING=41, WS=42;
	public const int
		RULE_start = 0, RULE_usecase = 1, RULE_ucconditions = 2, RULE_conditions = 3, 
		RULE_condition = 4, RULE_contextcondition = 5, RULE_valuecondition = 6, 
		RULE_mainscenario = 7, RULE_scenarios = 8, RULE_scenario = 9, RULE_sentences = 10, 
		RULE_altsentences = 11, RULE_sentence = 12, RULE_altsentence = 13, RULE_condsentence = 14, 
		RULE_endsentence = 15, RULE_resultsentence = 16, RULE_rejoinsentence = 17, 
		RULE_result = 18, RULE_repsentence = 19, RULE_svosentence = 20, RULE_altsvosentence = 21, 
		RULE_step = 22, RULE_systemstep = 23, RULE_toactorpredicate = 24, RULE_showpredicate = 25, 
		RULE_closepredicate = 26, RULE_tosystempredicate = 27, RULE_readpredicate = 28, 
		RULE_updatepredicate = 29, RULE_deletepredicate = 30, RULE_checkpredicate = 31, 
		RULE_executepredicate = 32, RULE_userstep = 33, RULE_selectpredicate = 34, 
		RULE_enterpredicate = 35, RULE_invoke = 36, RULE_notiondef = 37, RULE_viewnotion = 38, 
		RULE_viewtype = 39, RULE_triggernotion = 40, RULE_triggertype = 41, RULE_namesandlabels = 42, 
		RULE_datanotion = 43, RULE_attributes = 44, RULE_attribute = 45, RULE_multnotion = 46, 
		RULE_datatype = 47, RULE_actor = 48, RULE_notion = 49, RULE_value = 50, 
		RULE_name = 51, RULE_label = 52, RULE_altlabel = 53, RULE_labelref = 54;
	public static readonly string[] ruleNames = {
		"start", "usecase", "ucconditions", "conditions", "condition", "contextcondition", 
		"valuecondition", "mainscenario", "scenarios", "scenario", "sentences", 
		"altsentences", "sentence", "altsentence", "condsentence", "endsentence", 
		"resultsentence", "rejoinsentence", "result", "repsentence", "svosentence", 
		"altsvosentence", "step", "systemstep", "toactorpredicate", "showpredicate", 
		"closepredicate", "tosystempredicate", "readpredicate", "updatepredicate", 
		"deletepredicate", "checkpredicate", "executepredicate", "userstep", "selectpredicate", 
		"enterpredicate", "invoke", "notiondef", "viewnotion", "viewtype", "triggernotion", 
		"triggertype", "namesandlabels", "datanotion", "attributes", "attribute", 
		"multnotion", "datatype", "actor", "notion", "value", "name", "label", 
		"altlabel", "labelref"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Use case'", "'{'", "'}'", "';'", "'user'", "'?'", "'Main scenario'", 
		"'Scenario'", "'['", "']'", "'->'", "'end'", "'!'", "'rejoin'", "'-\"-'", 
		"'System'", "'<show>'", "'<close>'", "'<read>'", "'<update>'", "'<delete>'", 
		"'<check>'", "'<execute>'", "'<select>'", "'<enter>'", "'<invoke>'", "'View'", 
		"'*'", "'Trigger'", "','", "'Data'", "':'", "'integer'", "'float'", "'text'", 
		"'boolean'", "'time'", "'date'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "NUMBER", "CHAR", "STRING", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RslBis.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RslBisParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RslBisParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RslBisParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RslBisParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsecaseContext[] usecase() {
			return GetRuleContexts<UsecaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsecaseContext usecase(int i) {
			return GetRuleContext<UsecaseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotiondefContext[] notiondef() {
			return GetRuleContexts<NotiondefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotiondefContext notiondef(int i) {
			return GetRuleContext<NotiondefContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 110;
				usecase();
				}
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 );
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2818572288L) != 0)) {
				{
				{
				State = 115;
				notiondef();
				}
				}
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 121;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsecaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainscenarioContext mainscenario() {
			return GetRuleContext<MainscenarioContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScenariosContext scenarios() {
			return GetRuleContext<ScenariosContext>(0);
		}
		public UsecaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usecase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsecase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsecaseContext usecase() {
		UsecaseContext _localctx = new UsecaseContext(Context, State);
		EnterRule(_localctx, 2, RULE_usecase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			Match(T__0);
			State = 124;
			name();
			State = 125;
			mainscenario();
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 126;
				scenarios();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UcconditionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionsContext conditions() {
			return GetRuleContext<ConditionsContext>(0);
		}
		public UcconditionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ucconditions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUcconditions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UcconditionsContext ucconditions() {
		UcconditionsContext _localctx = new UcconditionsContext(Context, State);
		EnterRule(_localctx, 4, RULE_ucconditions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(T__1);
			State = 130;
			conditions();
			State = 131;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionsContext conditions() {
			return GetRuleContext<ConditionsContext>(0);
		}
		public ConditionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionsContext conditions() {
		ConditionsContext _localctx = new ConditionsContext(Context, State);
		EnterRule(_localctx, 6, RULE_conditions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			condition();
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 134;
				Match(T__3);
				State = 135;
				conditions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueconditionContext valuecondition() {
			return GetRuleContext<ValueconditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContextconditionContext contextcondition() {
			return GetRuleContext<ContextconditionContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 8, RULE_condition);
		try {
			State = 140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 138;
				valuecondition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 139;
				contextcondition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContextconditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public ContextconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contextcondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContextcondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContextconditionContext contextcondition() {
		ContextconditionContext _localctx = new ContextconditionContext(Context, State);
		EnterRule(_localctx, 10, RULE_contextcondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueconditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public ValueconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valuecondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValuecondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueconditionContext valuecondition() {
		ValueconditionContext _localctx = new ValueconditionContext(Context, State);
		EnterRule(_localctx, 12, RULE_valuecondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				{
				State = 144;
				Match(T__4);
				}
				break;
			case STRING:
				{
				State = 145;
				notion();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 148;
			Match(T__5);
			State = 149;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainscenarioContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SentencesContext sentences() {
			return GetRuleContext<SentencesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndsentenceContext endsentence() {
			return GetRuleContext<EndsentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UcconditionsContext ucconditions() {
			return GetRuleContext<UcconditionsContext>(0);
		}
		public MainscenarioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainscenario; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainscenario(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainscenarioContext mainscenario() {
		MainscenarioContext _localctx = new MainscenarioContext(Context, State);
		EnterRule(_localctx, 14, RULE_mainscenario);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(T__6);
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 152;
				ucconditions();
				}
			}

			State = 155;
			sentences();
			State = 156;
			endsentence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScenariosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScenarioContext scenario() {
			return GetRuleContext<ScenarioContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScenariosContext scenarios() {
			return GetRuleContext<ScenariosContext>(0);
		}
		public ScenariosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scenarios; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScenarios(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScenariosContext scenarios() {
		ScenariosContext _localctx = new ScenariosContext(Context, State);
		EnterRule(_localctx, 16, RULE_scenarios);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			scenario();
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 159;
				scenarios();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScenarioContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RepsentenceContext repsentence() {
			return GetRuleContext<RepsentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltsentencesContext altsentences() {
			return GetRuleContext<AltsentencesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndsentenceContext endsentence() {
			return GetRuleContext<EndsentenceContext>(0);
		}
		public ScenarioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scenario; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScenario(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScenarioContext scenario() {
		ScenarioContext _localctx = new ScenarioContext(Context, State);
		EnterRule(_localctx, 18, RULE_scenario);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(T__7);
			State = 163;
			repsentence();
			State = 164;
			altsentences();
			State = 165;
			endsentence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SentencesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SentenceContext sentence() {
			return GetRuleContext<SentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentencesContext sentences() {
			return GetRuleContext<SentencesContext>(0);
		}
		public SentencesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sentences; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentences(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SentencesContext sentences() {
		SentencesContext _localctx = new SentencesContext(Context, State);
		EnterRule(_localctx, 20, RULE_sentences);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			sentence();
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8 || _la==NUMBER) {
				{
				State = 168;
				sentences();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltsentencesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AltsentenceContext altsentence() {
			return GetRuleContext<AltsentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltsentencesContext altsentences() {
			return GetRuleContext<AltsentencesContext>(0);
		}
		public AltsentencesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altsentences; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltsentences(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltsentencesContext altsentences() {
		AltsentencesContext _localctx = new AltsentencesContext(Context, State);
		EnterRule(_localctx, 22, RULE_altsentences);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			altsentence();
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8 || _la==CHAR) {
				{
				State = 172;
				altsentences();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SvosentenceContext svosentence() {
			return GetRuleContext<SvosentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondsentenceContext condsentence() {
			return GetRuleContext<CondsentenceContext>(0);
		}
		public SentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SentenceContext sentence() {
		SentenceContext _localctx = new SentenceContext(Context, State);
		EnterRule(_localctx, 24, RULE_sentence);
		try {
			State = 177;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175;
				svosentence();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 176;
				condsentence();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltsentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AltsvosentenceContext altsvosentence() {
			return GetRuleContext<AltsvosentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondsentenceContext condsentence() {
			return GetRuleContext<CondsentenceContext>(0);
		}
		public AltsentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altsentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltsentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltsentenceContext altsentence() {
		AltsentenceContext _localctx = new AltsentenceContext(Context, State);
		EnterRule(_localctx, 26, RULE_altsentence);
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 179;
				altsvosentence();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 180;
				condsentence();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondsentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionsContext conditions() {
			return GetRuleContext<ConditionsContext>(0);
		}
		public CondsentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condsentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondsentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondsentenceContext condsentence() {
		CondsentenceContext _localctx = new CondsentenceContext(Context, State);
		EnterRule(_localctx, 28, RULE_condsentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(T__8);
			State = 184;
			conditions();
			State = 185;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndsentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResultsentenceContext resultsentence() {
			return GetRuleContext<ResultsentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RejoinsentenceContext rejoinsentence() {
			return GetRuleContext<RejoinsentenceContext>(0);
		}
		public EndsentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endsentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndsentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndsentenceContext endsentence() {
		EndsentenceContext _localctx = new EndsentenceContext(Context, State);
		EnterRule(_localctx, 30, RULE_endsentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			Match(T__10);
			State = 190;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				{
				State = 188;
				resultsentence();
				}
				break;
			case T__13:
				{
				State = 189;
				rejoinsentence();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultsentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ResultsentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resultsentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResultsentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResultsentenceContext resultsentence() {
		ResultsentenceContext _localctx = new ResultsentenceContext(Context, State);
		EnterRule(_localctx, 32, RULE_resultsentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(T__11);
			State = 193;
			Match(T__12);
			State = 194;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RejoinsentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelrefContext labelref() {
			return GetRuleContext<LabelrefContext>(0);
		}
		public RejoinsentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rejoinsentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRejoinsentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RejoinsentenceContext rejoinsentence() {
		RejoinsentenceContext _localctx = new RejoinsentenceContext(Context, State);
		EnterRule(_localctx, 34, RULE_rejoinsentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			Match(T__13);
			State = 197;
			labelref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RslBisParser.STRING, 0); }
		public ResultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResultContext result() {
		ResultContext _localctx = new ResultContext(Context, State);
		EnterRule(_localctx, 36, RULE_result);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepsentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltlabelContext altlabel() {
			return GetRuleContext<AltlabelContext>(0);
		}
		public RepsentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repsentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepsentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepsentenceContext repsentence() {
		RepsentenceContext _localctx = new RepsentenceContext(Context, State);
		EnterRule(_localctx, 38, RULE_repsentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 201;
				label();
				}
				break;
			case CHAR:
				{
				State = 202;
				altlabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 205;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SvosentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StepContext step() {
			return GetRuleContext<StepContext>(0);
		}
		public SvosentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_svosentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSvosentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SvosentenceContext svosentence() {
		SvosentenceContext _localctx = new SvosentenceContext(Context, State);
		EnterRule(_localctx, 40, RULE_svosentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			label();
			State = 208;
			step();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltsvosentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AltlabelContext altlabel() {
			return GetRuleContext<AltlabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StepContext step() {
			return GetRuleContext<StepContext>(0);
		}
		public AltsvosentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altsvosentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltsvosentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltsvosentenceContext altsvosentence() {
		AltsvosentenceContext _localctx = new AltsvosentenceContext(Context, State);
		EnterRule(_localctx, 42, RULE_altsvosentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			altlabel();
			State = 211;
			step();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StepContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserstepContext userstep() {
			return GetRuleContext<UserstepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SystemstepContext systemstep() {
			return GetRuleContext<SystemstepContext>(0);
		}
		public StepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_step; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepContext step() {
		StepContext _localctx = new StepContext(Context, State);
		EnterRule(_localctx, 44, RULE_step);
		try {
			State = 215;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 213;
				userstep();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 214;
				systemstep();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SystemstepContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TosystempredicateContext tosystempredicate() {
			return GetRuleContext<TosystempredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ToactorpredicateContext toactorpredicate() {
			return GetRuleContext<ToactorpredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvokeContext invoke() {
			return GetRuleContext<InvokeContext>(0);
		}
		public SystemstepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_systemstep; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSystemstep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SystemstepContext systemstep() {
		SystemstepContext _localctx = new SystemstepContext(Context, State);
		EnterRule(_localctx, 46, RULE_systemstep);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			Match(T__15);
			State = 221;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
				{
				State = 218;
				tosystempredicate();
				}
				break;
			case T__16:
			case T__17:
				{
				State = 219;
				toactorpredicate();
				}
				break;
			case T__25:
				{
				State = 220;
				invoke();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ToactorpredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShowpredicateContext showpredicate() {
			return GetRuleContext<ShowpredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClosepredicateContext closepredicate() {
			return GetRuleContext<ClosepredicateContext>(0);
		}
		public ToactorpredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_toactorpredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToactorpredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ToactorpredicateContext toactorpredicate() {
		ToactorpredicateContext _localctx = new ToactorpredicateContext(Context, State);
		EnterRule(_localctx, 48, RULE_toactorpredicate);
		try {
			State = 225;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__16:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223;
				showpredicate();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 2);
				{
				State = 224;
				closepredicate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowpredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public ShowpredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showpredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowpredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowpredicateContext showpredicate() {
		ShowpredicateContext _localctx = new ShowpredicateContext(Context, State);
		EnterRule(_localctx, 50, RULE_showpredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			Match(T__16);
			State = 228;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClosepredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public ClosepredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closepredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosepredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClosepredicateContext closepredicate() {
		ClosepredicateContext _localctx = new ClosepredicateContext(Context, State);
		EnterRule(_localctx, 52, RULE_closepredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			Match(T__17);
			State = 231;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TosystempredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReadpredicateContext readpredicate() {
			return GetRuleContext<ReadpredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatepredicateContext updatepredicate() {
			return GetRuleContext<UpdatepredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeletepredicateContext deletepredicate() {
			return GetRuleContext<DeletepredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckpredicateContext checkpredicate() {
			return GetRuleContext<CheckpredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecutepredicateContext executepredicate() {
			return GetRuleContext<ExecutepredicateContext>(0);
		}
		public TosystempredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tosystempredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTosystempredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TosystempredicateContext tosystempredicate() {
		TosystempredicateContext _localctx = new TosystempredicateContext(Context, State);
		EnterRule(_localctx, 54, RULE_tosystempredicate);
		try {
			State = 238;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__18:
				EnterOuterAlt(_localctx, 1);
				{
				State = 233;
				readpredicate();
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 2);
				{
				State = 234;
				updatepredicate();
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 3);
				{
				State = 235;
				deletepredicate();
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 4);
				{
				State = 236;
				checkpredicate();
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 5);
				{
				State = 237;
				executepredicate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadpredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public ReadpredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readpredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadpredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadpredicateContext readpredicate() {
		ReadpredicateContext _localctx = new ReadpredicateContext(Context, State);
		EnterRule(_localctx, 56, RULE_readpredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			Match(T__18);
			State = 241;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdatepredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public UpdatepredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updatepredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdatepredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdatepredicateContext updatepredicate() {
		UpdatepredicateContext _localctx = new UpdatepredicateContext(Context, State);
		EnterRule(_localctx, 58, RULE_updatepredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			Match(T__19);
			State = 244;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeletepredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public DeletepredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deletepredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeletepredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeletepredicateContext deletepredicate() {
		DeletepredicateContext _localctx = new DeletepredicateContext(Context, State);
		EnterRule(_localctx, 60, RULE_deletepredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			Match(T__20);
			State = 247;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckpredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public CheckpredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkpredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckpredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckpredicateContext checkpredicate() {
		CheckpredicateContext _localctx = new CheckpredicateContext(Context, State);
		EnterRule(_localctx, 62, RULE_checkpredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			Match(T__21);
			State = 250;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecutepredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public ExecutepredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executepredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecutepredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecutepredicateContext executepredicate() {
		ExecutepredicateContext _localctx = new ExecutepredicateContext(Context, State);
		EnterRule(_localctx, 64, RULE_executepredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			Match(T__22);
			State = 253;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserstepContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActorContext actor() {
			return GetRuleContext<ActorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectpredicateContext selectpredicate() {
			return GetRuleContext<SelectpredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnterpredicateContext enterpredicate() {
			return GetRuleContext<EnterpredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvokeContext invoke() {
			return GetRuleContext<InvokeContext>(0);
		}
		public UserstepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userstep; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserstep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserstepContext userstep() {
		UserstepContext _localctx = new UserstepContext(Context, State);
		EnterRule(_localctx, 66, RULE_userstep);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			actor();
			State = 259;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__23:
				{
				State = 256;
				selectpredicate();
				}
				break;
			case T__24:
				{
				State = 257;
				enterpredicate();
				}
				break;
			case T__25:
				{
				State = 258;
				invoke();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectpredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public SelectpredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectpredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectpredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectpredicateContext selectpredicate() {
		SelectpredicateContext _localctx = new SelectpredicateContext(Context, State);
		EnterRule(_localctx, 68, RULE_selectpredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			Match(T__23);
			State = 262;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnterpredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public EnterpredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enterpredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnterpredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnterpredicateContext enterpredicate() {
		EnterpredicateContext _localctx = new EnterpredicateContext(Context, State);
		EnterRule(_localctx, 70, RULE_enterpredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			Match(T__24);
			State = 265;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvokeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public InvokeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invoke; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvokeContext invoke() {
		InvokeContext _localctx = new InvokeContext(Context, State);
		EnterRule(_localctx, 72, RULE_invoke);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			Match(T__25);
			State = 268;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotiondefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ViewnotionContext viewnotion() {
			return GetRuleContext<ViewnotionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggernotionContext triggernotion() {
			return GetRuleContext<TriggernotionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatanotionContext datanotion() {
			return GetRuleContext<DatanotionContext>(0);
		}
		public NotiondefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notiondef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotiondef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotiondefContext notiondef() {
		NotiondefContext _localctx = new NotiondefContext(Context, State);
		EnterRule(_localctx, 74, RULE_notiondef);
		try {
			State = 273;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__26:
				EnterOuterAlt(_localctx, 1);
				{
				State = 270;
				viewnotion();
				}
				break;
			case T__28:
				EnterOuterAlt(_localctx, 2);
				{
				State = 271;
				triggernotion();
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 3);
				{
				State = 272;
				datanotion();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewnotionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ViewtypeContext viewtype() {
			return GetRuleContext<ViewtypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamesandlabelsContext namesandlabels() {
			return GetRuleContext<NamesandlabelsContext>(0);
		}
		public ViewnotionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewnotion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewnotion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewnotionContext viewnotion() {
		ViewnotionContext _localctx = new ViewnotionContext(Context, State);
		EnterRule(_localctx, 76, RULE_viewnotion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			Match(T__26);
			State = 276;
			Match(T__27);
			State = 277;
			viewtype();
			State = 278;
			Match(T__27);
			State = 279;
			namesandlabels();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewtypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RslBisParser.STRING, 0); }
		public ViewtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewtype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewtypeContext viewtype() {
		ViewtypeContext _localctx = new ViewtypeContext(Context, State);
		EnterRule(_localctx, 78, RULE_viewtype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggernotionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamesandlabelsContext namesandlabels() {
			return GetRuleContext<NamesandlabelsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggertypeContext triggertype() {
			return GetRuleContext<TriggertypeContext>(0);
		}
		public TriggernotionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggernotion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriggernotion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriggernotionContext triggernotion() {
		TriggernotionContext _localctx = new TriggernotionContext(Context, State);
		EnterRule(_localctx, 80, RULE_triggernotion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(T__28);
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__27) {
				{
				State = 284;
				Match(T__27);
				State = 285;
				triggertype();
				State = 286;
				Match(T__27);
				}
			}

			State = 290;
			namesandlabels();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggertypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RslBisParser.STRING, 0); }
		public TriggertypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggertype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriggertype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriggertypeContext triggertype() {
		TriggertypeContext _localctx = new TriggertypeContext(Context, State);
		EnterRule(_localctx, 82, RULE_triggertype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamesandlabelsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamesandlabelsContext namesandlabels() {
			return GetRuleContext<NamesandlabelsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(RslBisParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(RslBisParser.STRING, i);
		}
		public NamesandlabelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namesandlabels; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamesandlabels(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamesandlabelsContext namesandlabels() {
		NamesandlabelsContext _localctx = new NamesandlabelsContext(Context, State);
		EnterRule(_localctx, 84, RULE_namesandlabels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			name();
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 295;
				Match(T__1);
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 296;
					Match(STRING);
					}
					}
					State = 299;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==STRING );
				State = 301;
				Match(T__2);
				}
			}

			State = 306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 304;
				Match(T__29);
				State = 305;
				namesandlabels();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatanotionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public DatanotionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datanotion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatanotion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatanotionContext datanotion() {
		DatanotionContext _localctx = new DatanotionContext(Context, State);
		EnterRule(_localctx, 86, RULE_datanotion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			Match(T__30);
			State = 309;
			name();
			State = 310;
			Match(T__1);
			State = 311;
			attributes();
			State = 312;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(Context, State);
		EnterRule(_localctx, 88, RULE_attributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			attribute();
			State = 317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 315;
				Match(T__29);
				State = 316;
				attributes();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultnotionContext multnotion() {
			return GetRuleContext<MultnotionContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 90, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			name();
			State = 320;
			Match(T__31);
			State = 324;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
				{
				State = 321;
				datatype();
				}
				break;
			case STRING:
				{
				State = 322;
				notion();
				}
				break;
			case T__8:
				{
				State = 323;
				multnotion();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultnotionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public MultnotionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multnotion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultnotion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultnotionContext multnotion() {
		MultnotionContext _localctx = new MultnotionContext(Context, State);
		EnterRule(_localctx, 92, RULE_multnotion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			Match(T__8);
			State = 327;
			notion();
			State = 328;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatatypeContext : ParserRuleContext {
		public DatatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatatype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatatypeContext datatype() {
		DatatypeContext _localctx = new DatatypeContext(Context, State);
		EnterRule(_localctx, 94, RULE_datatype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 541165879296L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RslBisParser.STRING, 0); }
		public ActorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActorContext actor() {
		ActorContext _localctx = new ActorContext(Context, State);
		EnterRule(_localctx, 96, RULE_actor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(RslBisParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(RslBisParser.STRING, i);
		}
		public NotionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotionContext notion() {
		NotionContext _localctx = new NotionContext(Context, State);
		EnterRule(_localctx, 98, RULE_notion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 334;
				Match(STRING);
				}
				}
				State = 337;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(RslBisParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(RslBisParser.STRING, i);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 100, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 339;
				Match(STRING);
				}
				}
				State = 342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(RslBisParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(RslBisParser.STRING, i);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 102, RULE_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 344;
				Match(STRING);
				}
				}
				State = 347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RslBisParser.NUMBER, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 104, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349;
			Match(NUMBER);
			State = 350;
			Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltlabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(RslBisParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RslBisParser.NUMBER, 0); }
		public AltlabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altlabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltlabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltlabelContext altlabel() {
		AltlabelContext _localctx = new AltlabelContext(Context, State);
		EnterRule(_localctx, 106, RULE_altlabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			Match(CHAR);
			State = 353;
			Match(NUMBER);
			State = 354;
			Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelrefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RslBisParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(RslBisParser.CHAR, 0); }
		public LabelrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelrefContext labelref() {
		LabelrefContext _localctx = new LabelrefContext(Context, State);
		EnterRule(_localctx, 108, RULE_labelref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHAR) {
				{
				State = 356;
				Match(CHAR);
				}
			}

			State = 359;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,42,362,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,1,0,4,0,112,8,0,11,0,
		12,0,113,1,0,5,0,117,8,0,10,0,12,0,120,9,0,1,0,1,0,1,1,1,1,1,1,1,1,3,1,
		128,8,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,3,3,137,8,3,1,4,1,4,3,4,141,8,4,1,
		5,1,5,1,6,1,6,3,6,147,8,6,1,6,1,6,1,6,1,7,1,7,3,7,154,8,7,1,7,1,7,1,7,
		1,8,1,8,3,8,161,8,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,3,10,170,8,10,1,11,1,
		11,3,11,174,8,11,1,12,1,12,3,12,178,8,12,1,13,1,13,3,13,182,8,13,1,14,
		1,14,1,14,1,14,1,15,1,15,1,15,3,15,191,8,15,1,16,1,16,1,16,1,16,1,17,1,
		17,1,17,1,18,1,18,1,19,1,19,3,19,204,8,19,1,19,1,19,1,20,1,20,1,20,1,21,
		1,21,1,21,1,22,1,22,3,22,216,8,22,1,23,1,23,1,23,1,23,3,23,222,8,23,1,
		24,1,24,3,24,226,8,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
		1,27,3,27,239,8,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,
		31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,3,33,260,8,33,1,34,1,34,1,34,
		1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,3,37,274,8,37,1,38,1,38,1,
		38,1,38,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,40,1,40,3,40,289,8,40,1,40,
		1,40,1,41,1,41,1,42,1,42,1,42,4,42,298,8,42,11,42,12,42,299,1,42,3,42,
		303,8,42,1,42,1,42,3,42,307,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,
		44,1,44,3,44,318,8,44,1,45,1,45,1,45,1,45,1,45,3,45,325,8,45,1,46,1,46,
		1,46,1,46,1,47,1,47,1,48,1,48,1,49,4,49,336,8,49,11,49,12,49,337,1,50,
		4,50,341,8,50,11,50,12,50,342,1,51,4,51,346,8,51,11,51,12,51,347,1,52,
		1,52,1,52,1,53,1,53,1,53,1,53,1,54,3,54,358,8,54,1,54,1,54,1,54,0,0,55,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
		50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
		98,100,102,104,106,108,0,1,1,0,33,38,343,0,111,1,0,0,0,2,123,1,0,0,0,4,
		129,1,0,0,0,6,133,1,0,0,0,8,140,1,0,0,0,10,142,1,0,0,0,12,146,1,0,0,0,
		14,151,1,0,0,0,16,158,1,0,0,0,18,162,1,0,0,0,20,167,1,0,0,0,22,171,1,0,
		0,0,24,177,1,0,0,0,26,181,1,0,0,0,28,183,1,0,0,0,30,187,1,0,0,0,32,192,
		1,0,0,0,34,196,1,0,0,0,36,199,1,0,0,0,38,203,1,0,0,0,40,207,1,0,0,0,42,
		210,1,0,0,0,44,215,1,0,0,0,46,217,1,0,0,0,48,225,1,0,0,0,50,227,1,0,0,
		0,52,230,1,0,0,0,54,238,1,0,0,0,56,240,1,0,0,0,58,243,1,0,0,0,60,246,1,
		0,0,0,62,249,1,0,0,0,64,252,1,0,0,0,66,255,1,0,0,0,68,261,1,0,0,0,70,264,
		1,0,0,0,72,267,1,0,0,0,74,273,1,0,0,0,76,275,1,0,0,0,78,281,1,0,0,0,80,
		283,1,0,0,0,82,292,1,0,0,0,84,294,1,0,0,0,86,308,1,0,0,0,88,314,1,0,0,
		0,90,319,1,0,0,0,92,326,1,0,0,0,94,330,1,0,0,0,96,332,1,0,0,0,98,335,1,
		0,0,0,100,340,1,0,0,0,102,345,1,0,0,0,104,349,1,0,0,0,106,352,1,0,0,0,
		108,357,1,0,0,0,110,112,3,2,1,0,111,110,1,0,0,0,112,113,1,0,0,0,113,111,
		1,0,0,0,113,114,1,0,0,0,114,118,1,0,0,0,115,117,3,74,37,0,116,115,1,0,
		0,0,117,120,1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,121,1,0,0,0,120,
		118,1,0,0,0,121,122,5,0,0,1,122,1,1,0,0,0,123,124,5,1,0,0,124,125,3,102,
		51,0,125,127,3,14,7,0,126,128,3,16,8,0,127,126,1,0,0,0,127,128,1,0,0,0,
		128,3,1,0,0,0,129,130,5,2,0,0,130,131,3,6,3,0,131,132,5,3,0,0,132,5,1,
		0,0,0,133,136,3,8,4,0,134,135,5,4,0,0,135,137,3,6,3,0,136,134,1,0,0,0,
		136,137,1,0,0,0,137,7,1,0,0,0,138,141,3,12,6,0,139,141,3,10,5,0,140,138,
		1,0,0,0,140,139,1,0,0,0,141,9,1,0,0,0,142,143,3,98,49,0,143,11,1,0,0,0,
		144,147,5,5,0,0,145,147,3,98,49,0,146,144,1,0,0,0,146,145,1,0,0,0,147,
		148,1,0,0,0,148,149,5,6,0,0,149,150,3,100,50,0,150,13,1,0,0,0,151,153,
		5,7,0,0,152,154,3,4,2,0,153,152,1,0,0,0,153,154,1,0,0,0,154,155,1,0,0,
		0,155,156,3,20,10,0,156,157,3,30,15,0,157,15,1,0,0,0,158,160,3,18,9,0,
		159,161,3,16,8,0,160,159,1,0,0,0,160,161,1,0,0,0,161,17,1,0,0,0,162,163,
		5,8,0,0,163,164,3,38,19,0,164,165,3,22,11,0,165,166,3,30,15,0,166,19,1,
		0,0,0,167,169,3,24,12,0,168,170,3,20,10,0,169,168,1,0,0,0,169,170,1,0,
		0,0,170,21,1,0,0,0,171,173,3,26,13,0,172,174,3,22,11,0,173,172,1,0,0,0,
		173,174,1,0,0,0,174,23,1,0,0,0,175,178,3,40,20,0,176,178,3,28,14,0,177,
		175,1,0,0,0,177,176,1,0,0,0,178,25,1,0,0,0,179,182,3,42,21,0,180,182,3,
		28,14,0,181,179,1,0,0,0,181,180,1,0,0,0,182,27,1,0,0,0,183,184,5,9,0,0,
		184,185,3,6,3,0,185,186,5,10,0,0,186,29,1,0,0,0,187,190,5,11,0,0,188,191,
		3,32,16,0,189,191,3,34,17,0,190,188,1,0,0,0,190,189,1,0,0,0,191,31,1,0,
		0,0,192,193,5,12,0,0,193,194,5,13,0,0,194,195,3,100,50,0,195,33,1,0,0,
		0,196,197,5,14,0,0,197,198,3,108,54,0,198,35,1,0,0,0,199,200,5,41,0,0,
		200,37,1,0,0,0,201,204,3,104,52,0,202,204,3,106,53,0,203,201,1,0,0,0,203,
		202,1,0,0,0,204,205,1,0,0,0,205,206,5,15,0,0,206,39,1,0,0,0,207,208,3,
		104,52,0,208,209,3,44,22,0,209,41,1,0,0,0,210,211,3,106,53,0,211,212,3,
		44,22,0,212,43,1,0,0,0,213,216,3,66,33,0,214,216,3,46,23,0,215,213,1,0,
		0,0,215,214,1,0,0,0,216,45,1,0,0,0,217,221,5,16,0,0,218,222,3,54,27,0,
		219,222,3,48,24,0,220,222,3,72,36,0,221,218,1,0,0,0,221,219,1,0,0,0,221,
		220,1,0,0,0,222,47,1,0,0,0,223,226,3,50,25,0,224,226,3,52,26,0,225,223,
		1,0,0,0,225,224,1,0,0,0,226,49,1,0,0,0,227,228,5,17,0,0,228,229,3,98,49,
		0,229,51,1,0,0,0,230,231,5,18,0,0,231,232,3,98,49,0,232,53,1,0,0,0,233,
		239,3,56,28,0,234,239,3,58,29,0,235,239,3,60,30,0,236,239,3,62,31,0,237,
		239,3,64,32,0,238,233,1,0,0,0,238,234,1,0,0,0,238,235,1,0,0,0,238,236,
		1,0,0,0,238,237,1,0,0,0,239,55,1,0,0,0,240,241,5,19,0,0,241,242,3,98,49,
		0,242,57,1,0,0,0,243,244,5,20,0,0,244,245,3,98,49,0,245,59,1,0,0,0,246,
		247,5,21,0,0,247,248,3,98,49,0,248,61,1,0,0,0,249,250,5,22,0,0,250,251,
		3,98,49,0,251,63,1,0,0,0,252,253,5,23,0,0,253,254,3,98,49,0,254,65,1,0,
		0,0,255,259,3,96,48,0,256,260,3,68,34,0,257,260,3,70,35,0,258,260,3,72,
		36,0,259,256,1,0,0,0,259,257,1,0,0,0,259,258,1,0,0,0,260,67,1,0,0,0,261,
		262,5,24,0,0,262,263,3,98,49,0,263,69,1,0,0,0,264,265,5,25,0,0,265,266,
		3,98,49,0,266,71,1,0,0,0,267,268,5,26,0,0,268,269,3,102,51,0,269,73,1,
		0,0,0,270,274,3,76,38,0,271,274,3,80,40,0,272,274,3,86,43,0,273,270,1,
		0,0,0,273,271,1,0,0,0,273,272,1,0,0,0,274,75,1,0,0,0,275,276,5,27,0,0,
		276,277,5,28,0,0,277,278,3,78,39,0,278,279,5,28,0,0,279,280,3,84,42,0,
		280,77,1,0,0,0,281,282,5,41,0,0,282,79,1,0,0,0,283,288,5,29,0,0,284,285,
		5,28,0,0,285,286,3,82,41,0,286,287,5,28,0,0,287,289,1,0,0,0,288,284,1,
		0,0,0,288,289,1,0,0,0,289,290,1,0,0,0,290,291,3,84,42,0,291,81,1,0,0,0,
		292,293,5,41,0,0,293,83,1,0,0,0,294,302,3,102,51,0,295,297,5,2,0,0,296,
		298,5,41,0,0,297,296,1,0,0,0,298,299,1,0,0,0,299,297,1,0,0,0,299,300,1,
		0,0,0,300,301,1,0,0,0,301,303,5,3,0,0,302,295,1,0,0,0,302,303,1,0,0,0,
		303,306,1,0,0,0,304,305,5,30,0,0,305,307,3,84,42,0,306,304,1,0,0,0,306,
		307,1,0,0,0,307,85,1,0,0,0,308,309,5,31,0,0,309,310,3,102,51,0,310,311,
		5,2,0,0,311,312,3,88,44,0,312,313,5,3,0,0,313,87,1,0,0,0,314,317,3,90,
		45,0,315,316,5,30,0,0,316,318,3,88,44,0,317,315,1,0,0,0,317,318,1,0,0,
		0,318,89,1,0,0,0,319,320,3,102,51,0,320,324,5,32,0,0,321,325,3,94,47,0,
		322,325,3,98,49,0,323,325,3,92,46,0,324,321,1,0,0,0,324,322,1,0,0,0,324,
		323,1,0,0,0,325,91,1,0,0,0,326,327,5,9,0,0,327,328,3,98,49,0,328,329,5,
		10,0,0,329,93,1,0,0,0,330,331,7,0,0,0,331,95,1,0,0,0,332,333,5,41,0,0,
		333,97,1,0,0,0,334,336,5,41,0,0,335,334,1,0,0,0,336,337,1,0,0,0,337,335,
		1,0,0,0,337,338,1,0,0,0,338,99,1,0,0,0,339,341,5,41,0,0,340,339,1,0,0,
		0,341,342,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,101,1,0,0,0,344,
		346,5,41,0,0,345,344,1,0,0,0,346,347,1,0,0,0,347,345,1,0,0,0,347,348,1,
		0,0,0,348,103,1,0,0,0,349,350,5,39,0,0,350,351,5,32,0,0,351,105,1,0,0,
		0,352,353,5,40,0,0,353,354,5,39,0,0,354,355,5,32,0,0,355,107,1,0,0,0,356,
		358,5,40,0,0,357,356,1,0,0,0,357,358,1,0,0,0,358,359,1,0,0,0,359,360,5,
		39,0,0,360,109,1,0,0,0,30,113,118,127,136,140,146,153,160,169,173,177,
		181,190,203,215,221,225,238,259,273,288,299,302,306,317,324,337,342,347,
		357
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
