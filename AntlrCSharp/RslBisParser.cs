//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/smial/MyRepos/rsl-bis/AntlrCSharp/RslBis.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class RslBisParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, NUMBER=29, STRING=30, CHAR=31, 
		WS=32;
	public const int
		RULE_start = 0, RULE_usecase = 1, RULE_ucconditions = 2, RULE_conditions = 3, 
		RULE_condition = 4, RULE_mainscenario = 5, RULE_scenarios = 6, RULE_scenario = 7, 
		RULE_sentences = 8, RULE_altsentences = 9, RULE_sentence = 10, RULE_altsentence = 11, 
		RULE_condsentence = 12, RULE_endsentence = 13, RULE_resultsentence = 14, 
		RULE_rejoinsentence = 15, RULE_result = 16, RULE_repsentence = 17, RULE_svosentence = 18, 
		RULE_altsvosentence = 19, RULE_step = 20, RULE_systemstep = 21, RULE_toactorpredicate = 22, 
		RULE_showpredicate = 23, RULE_closepredicate = 24, RULE_tosystempredicate = 25, 
		RULE_readpredicate = 26, RULE_updatepredicate = 27, RULE_deletepredicate = 28, 
		RULE_validatepredicate = 29, RULE_executepredicate = 30, RULE_userstep = 31, 
		RULE_selectpredicate = 32, RULE_enterpredicate = 33, RULE_invoke = 34, 
		RULE_dnotion = 35, RULE_attributes = 36, RULE_attribute = 37, RULE_actor = 38, 
		RULE_notion = 39, RULE_name = 40, RULE_label = 41, RULE_altlabel = 42;
	public static readonly string[] ruleNames = {
		"start", "usecase", "ucconditions", "conditions", "condition", "mainscenario", 
		"scenarios", "scenario", "sentences", "altsentences", "sentence", "altsentence", 
		"condsentence", "endsentence", "resultsentence", "rejoinsentence", "result", 
		"repsentence", "svosentence", "altsvosentence", "step", "systemstep", 
		"toactorpredicate", "showpredicate", "closepredicate", "tosystempredicate", 
		"readpredicate", "updatepredicate", "deletepredicate", "validatepredicate", 
		"executepredicate", "userstep", "selectpredicate", "enterpredicate", "invoke", 
		"dnotion", "attributes", "attribute", "actor", "notion", "name", "label", 
		"altlabel"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Use case'", "'{'", "'}'", "';'", "'?'", "'Main scenario'", "'Scenario'", 
		"'['", "']'", "'->'", "'rejoin'", "'-\"-'", "'System'", "'<show>'", "'<close>'", 
		"'<read>'", "'<update>'", "'<delete>'", "'<validate>'", "'<execute>'", 
		"'<select>'", "'<enter>'", "'<invoke>'", "'Frame'", "'Trigger'", "'Data'", 
		"':'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "NUMBER", "STRING", "CHAR", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RslBis.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RslBisParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RslBisParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RslBisParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RslBisParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsecaseContext[] usecase() {
			return GetRuleContexts<UsecaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsecaseContext usecase(int i) {
			return GetRuleContext<UsecaseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DnotionContext[] dnotion() {
			return GetRuleContexts<DnotionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DnotionContext dnotion(int i) {
			return GetRuleContext<DnotionContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 86;
				usecase();
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 );
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 117440512L) != 0)) {
				{
				{
				State = 91;
				dnotion();
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 97;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsecaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainscenarioContext mainscenario() {
			return GetRuleContext<MainscenarioContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScenariosContext scenarios() {
			return GetRuleContext<ScenariosContext>(0);
		}
		public UsecaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usecase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsecase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsecaseContext usecase() {
		UsecaseContext _localctx = new UsecaseContext(Context, State);
		EnterRule(_localctx, 2, RULE_usecase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(T__0);
			State = 100;
			name();
			State = 101;
			mainscenario();
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 102;
				scenarios();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UcconditionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionsContext conditions() {
			return GetRuleContext<ConditionsContext>(0);
		}
		public UcconditionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ucconditions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUcconditions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UcconditionsContext ucconditions() {
		UcconditionsContext _localctx = new UcconditionsContext(Context, State);
		EnterRule(_localctx, 4, RULE_ucconditions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(T__1);
			State = 106;
			conditions();
			State = 107;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionsContext conditions() {
			return GetRuleContext<ConditionsContext>(0);
		}
		public ConditionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionsContext conditions() {
		ConditionsContext _localctx = new ConditionsContext(Context, State);
		EnterRule(_localctx, 6, RULE_conditions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			condition();
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 110;
				Match(T__3);
				State = 111;
				conditions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(RslBisParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(RslBisParser.STRING, i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 8, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 114;
				Match(STRING);
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 119;
				Match(T__4);
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 120;
					Match(STRING);
					}
					}
					State = 123;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==STRING );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainscenarioContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SentencesContext sentences() {
			return GetRuleContext<SentencesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndsentenceContext endsentence() {
			return GetRuleContext<EndsentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UcconditionsContext ucconditions() {
			return GetRuleContext<UcconditionsContext>(0);
		}
		public MainscenarioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainscenario; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainscenario(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainscenarioContext mainscenario() {
		MainscenarioContext _localctx = new MainscenarioContext(Context, State);
		EnterRule(_localctx, 10, RULE_mainscenario);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(T__5);
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 128;
				ucconditions();
				}
			}

			State = 131;
			sentences();
			State = 132;
			endsentence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScenariosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScenarioContext scenario() {
			return GetRuleContext<ScenarioContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScenariosContext scenarios() {
			return GetRuleContext<ScenariosContext>(0);
		}
		public ScenariosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scenarios; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScenarios(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScenariosContext scenarios() {
		ScenariosContext _localctx = new ScenariosContext(Context, State);
		EnterRule(_localctx, 12, RULE_scenarios);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			scenario();
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 135;
				scenarios();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScenarioContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RepsentenceContext repsentence() {
			return GetRuleContext<RepsentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltsentencesContext altsentences() {
			return GetRuleContext<AltsentencesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndsentenceContext endsentence() {
			return GetRuleContext<EndsentenceContext>(0);
		}
		public ScenarioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scenario; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScenario(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScenarioContext scenario() {
		ScenarioContext _localctx = new ScenarioContext(Context, State);
		EnterRule(_localctx, 14, RULE_scenario);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(T__6);
			State = 139;
			repsentence();
			State = 140;
			altsentences();
			State = 141;
			endsentence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SentencesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SentenceContext sentence() {
			return GetRuleContext<SentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentencesContext sentences() {
			return GetRuleContext<SentencesContext>(0);
		}
		public SentencesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sentences; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentences(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SentencesContext sentences() {
		SentencesContext _localctx = new SentencesContext(Context, State);
		EnterRule(_localctx, 16, RULE_sentences);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			sentence();
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7 || _la==NUMBER) {
				{
				State = 144;
				sentences();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltsentencesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AltsentenceContext altsentence() {
			return GetRuleContext<AltsentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltsentencesContext altsentences() {
			return GetRuleContext<AltsentencesContext>(0);
		}
		public AltsentencesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altsentences; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltsentences(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltsentencesContext altsentences() {
		AltsentencesContext _localctx = new AltsentencesContext(Context, State);
		EnterRule(_localctx, 18, RULE_altsentences);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			altsentence();
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7 || _la==CHAR) {
				{
				State = 148;
				altsentences();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SvosentenceContext svosentence() {
			return GetRuleContext<SvosentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondsentenceContext condsentence() {
			return GetRuleContext<CondsentenceContext>(0);
		}
		public SentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SentenceContext sentence() {
		SentenceContext _localctx = new SentenceContext(Context, State);
		EnterRule(_localctx, 20, RULE_sentence);
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 151;
				svosentence();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 152;
				condsentence();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltsentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AltsvosentenceContext altsvosentence() {
			return GetRuleContext<AltsvosentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondsentenceContext condsentence() {
			return GetRuleContext<CondsentenceContext>(0);
		}
		public AltsentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altsentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltsentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltsentenceContext altsentence() {
		AltsentenceContext _localctx = new AltsentenceContext(Context, State);
		EnterRule(_localctx, 22, RULE_altsentence);
		try {
			State = 157;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 155;
				altsvosentence();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 156;
				condsentence();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondsentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionsContext conditions() {
			return GetRuleContext<ConditionsContext>(0);
		}
		public CondsentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condsentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondsentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondsentenceContext condsentence() {
		CondsentenceContext _localctx = new CondsentenceContext(Context, State);
		EnterRule(_localctx, 24, RULE_condsentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			Match(T__7);
			State = 160;
			conditions();
			State = 161;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndsentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResultsentenceContext resultsentence() {
			return GetRuleContext<ResultsentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RejoinsentenceContext rejoinsentence() {
			return GetRuleContext<RejoinsentenceContext>(0);
		}
		public EndsentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endsentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndsentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndsentenceContext endsentence() {
		EndsentenceContext _localctx = new EndsentenceContext(Context, State);
		EnterRule(_localctx, 26, RULE_endsentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			Match(T__9);
			State = 166;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				{
				State = 164;
				resultsentence();
				}
				break;
			case T__10:
				{
				State = 165;
				rejoinsentence();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultsentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResultContext result() {
			return GetRuleContext<ResultContext>(0);
		}
		public ResultsentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resultsentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResultsentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResultsentenceContext resultsentence() {
		ResultsentenceContext _localctx = new ResultsentenceContext(Context, State);
		EnterRule(_localctx, 28, RULE_resultsentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			Match(T__1);
			State = 169;
			result();
			State = 170;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RejoinsentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RslBisParser.NUMBER, 0); }
		public RejoinsentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rejoinsentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRejoinsentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RejoinsentenceContext rejoinsentence() {
		RejoinsentenceContext _localctx = new RejoinsentenceContext(Context, State);
		EnterRule(_localctx, 30, RULE_rejoinsentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(T__10);
			State = 173;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RslBisParser.STRING, 0); }
		public ResultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResultContext result() {
		ResultContext _localctx = new ResultContext(Context, State);
		EnterRule(_localctx, 32, RULE_result);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepsentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public RepsentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repsentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepsentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepsentenceContext repsentence() {
		RepsentenceContext _localctx = new RepsentenceContext(Context, State);
		EnterRule(_localctx, 34, RULE_repsentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			label();
			State = 178;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SvosentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StepContext step() {
			return GetRuleContext<StepContext>(0);
		}
		public SvosentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_svosentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSvosentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SvosentenceContext svosentence() {
		SvosentenceContext _localctx = new SvosentenceContext(Context, State);
		EnterRule(_localctx, 36, RULE_svosentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			label();
			State = 181;
			step();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltsvosentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AltlabelContext altlabel() {
			return GetRuleContext<AltlabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StepContext step() {
			return GetRuleContext<StepContext>(0);
		}
		public AltsvosentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altsvosentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltsvosentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltsvosentenceContext altsvosentence() {
		AltsvosentenceContext _localctx = new AltsvosentenceContext(Context, State);
		EnterRule(_localctx, 38, RULE_altsvosentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			altlabel();
			State = 184;
			step();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StepContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserstepContext userstep() {
			return GetRuleContext<UserstepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SystemstepContext systemstep() {
			return GetRuleContext<SystemstepContext>(0);
		}
		public StepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_step; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepContext step() {
		StepContext _localctx = new StepContext(Context, State);
		EnterRule(_localctx, 40, RULE_step);
		try {
			State = 188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 186;
				userstep();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 2);
				{
				State = 187;
				systemstep();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SystemstepContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TosystempredicateContext tosystempredicate() {
			return GetRuleContext<TosystempredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ToactorpredicateContext toactorpredicate() {
			return GetRuleContext<ToactorpredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvokeContext invoke() {
			return GetRuleContext<InvokeContext>(0);
		}
		public SystemstepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_systemstep; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSystemstep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SystemstepContext systemstep() {
		SystemstepContext _localctx = new SystemstepContext(Context, State);
		EnterRule(_localctx, 42, RULE_systemstep);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			Match(T__12);
			State = 194;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
				{
				State = 191;
				tosystempredicate();
				}
				break;
			case T__13:
			case T__14:
				{
				State = 192;
				toactorpredicate();
				}
				break;
			case T__22:
				{
				State = 193;
				invoke();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ToactorpredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShowpredicateContext showpredicate() {
			return GetRuleContext<ShowpredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClosepredicateContext closepredicate() {
			return GetRuleContext<ClosepredicateContext>(0);
		}
		public ToactorpredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_toactorpredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToactorpredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ToactorpredicateContext toactorpredicate() {
		ToactorpredicateContext _localctx = new ToactorpredicateContext(Context, State);
		EnterRule(_localctx, 44, RULE_toactorpredicate);
		try {
			State = 198;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 196;
				showpredicate();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 2);
				{
				State = 197;
				closepredicate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowpredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public ShowpredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showpredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowpredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowpredicateContext showpredicate() {
		ShowpredicateContext _localctx = new ShowpredicateContext(Context, State);
		EnterRule(_localctx, 46, RULE_showpredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			Match(T__13);
			State = 201;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClosepredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public ClosepredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closepredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosepredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClosepredicateContext closepredicate() {
		ClosepredicateContext _localctx = new ClosepredicateContext(Context, State);
		EnterRule(_localctx, 48, RULE_closepredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			Match(T__14);
			State = 204;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TosystempredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReadpredicateContext readpredicate() {
			return GetRuleContext<ReadpredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatepredicateContext updatepredicate() {
			return GetRuleContext<UpdatepredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeletepredicateContext deletepredicate() {
			return GetRuleContext<DeletepredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValidatepredicateContext validatepredicate() {
			return GetRuleContext<ValidatepredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecutepredicateContext executepredicate() {
			return GetRuleContext<ExecutepredicateContext>(0);
		}
		public TosystempredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tosystempredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTosystempredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TosystempredicateContext tosystempredicate() {
		TosystempredicateContext _localctx = new TosystempredicateContext(Context, State);
		EnterRule(_localctx, 50, RULE_tosystempredicate);
		try {
			State = 211;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
				EnterOuterAlt(_localctx, 1);
				{
				State = 206;
				readpredicate();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 2);
				{
				State = 207;
				updatepredicate();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 3);
				{
				State = 208;
				deletepredicate();
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 4);
				{
				State = 209;
				validatepredicate();
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 5);
				{
				State = 210;
				executepredicate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadpredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public ReadpredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readpredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadpredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadpredicateContext readpredicate() {
		ReadpredicateContext _localctx = new ReadpredicateContext(Context, State);
		EnterRule(_localctx, 52, RULE_readpredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			Match(T__15);
			State = 214;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdatepredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public UpdatepredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updatepredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdatepredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdatepredicateContext updatepredicate() {
		UpdatepredicateContext _localctx = new UpdatepredicateContext(Context, State);
		EnterRule(_localctx, 54, RULE_updatepredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			Match(T__16);
			State = 217;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeletepredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public DeletepredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deletepredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeletepredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeletepredicateContext deletepredicate() {
		DeletepredicateContext _localctx = new DeletepredicateContext(Context, State);
		EnterRule(_localctx, 56, RULE_deletepredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(T__17);
			State = 220;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValidatepredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public ValidatepredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validatepredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValidatepredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValidatepredicateContext validatepredicate() {
		ValidatepredicateContext _localctx = new ValidatepredicateContext(Context, State);
		EnterRule(_localctx, 58, RULE_validatepredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(T__18);
			State = 223;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecutepredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public ExecutepredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executepredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecutepredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecutepredicateContext executepredicate() {
		ExecutepredicateContext _localctx = new ExecutepredicateContext(Context, State);
		EnterRule(_localctx, 60, RULE_executepredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			Match(T__19);
			State = 226;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserstepContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActorContext actor() {
			return GetRuleContext<ActorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectpredicateContext selectpredicate() {
			return GetRuleContext<SelectpredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnterpredicateContext enterpredicate() {
			return GetRuleContext<EnterpredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvokeContext invoke() {
			return GetRuleContext<InvokeContext>(0);
		}
		public UserstepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userstep; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserstep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserstepContext userstep() {
		UserstepContext _localctx = new UserstepContext(Context, State);
		EnterRule(_localctx, 62, RULE_userstep);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			actor();
			State = 232;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__20:
				{
				State = 229;
				selectpredicate();
				}
				break;
			case T__21:
				{
				State = 230;
				enterpredicate();
				}
				break;
			case T__22:
				{
				State = 231;
				invoke();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectpredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public SelectpredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectpredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectpredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectpredicateContext selectpredicate() {
		SelectpredicateContext _localctx = new SelectpredicateContext(Context, State);
		EnterRule(_localctx, 64, RULE_selectpredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			Match(T__20);
			State = 235;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnterpredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public EnterpredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enterpredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnterpredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnterpredicateContext enterpredicate() {
		EnterpredicateContext _localctx = new EnterpredicateContext(Context, State);
		EnterRule(_localctx, 66, RULE_enterpredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(T__21);
			State = 238;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvokeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public InvokeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invoke; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvokeContext invoke() {
		InvokeContext _localctx = new InvokeContext(Context, State);
		EnterRule(_localctx, 68, RULE_invoke);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			Match(T__22);
			State = 241;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DnotionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(RslBisParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(RslBisParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public DnotionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dnotion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDnotion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DnotionContext dnotion() {
		DnotionContext _localctx = new DnotionContext(Context, State);
		EnterRule(_localctx, 70, RULE_dnotion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 117440512L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 244;
				Match(STRING);
				}
				}
				State = 247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			State = 255;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__26:
				{
				{
				State = 249;
				Match(T__26);
				State = 250;
				Match(STRING);
				}
				}
				break;
			case T__1:
				{
				{
				State = 251;
				Match(T__1);
				State = 252;
				attributes();
				State = 253;
				Match(T__2);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(Context, State);
		EnterRule(_localctx, 72, RULE_attributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			attribute();
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__27) {
				{
				State = 258;
				Match(T__27);
				State = 259;
				attributes();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(RslBisParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(RslBisParser.STRING, i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 74, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 262;
				Match(STRING);
				}
				}
				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			State = 267;
			Match(T__26);
			State = 268;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RslBisParser.STRING, 0); }
		public ActorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActorContext actor() {
		ActorContext _localctx = new ActorContext(Context, State);
		EnterRule(_localctx, 76, RULE_actor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(RslBisParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(RslBisParser.STRING, i);
		}
		public NotionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotionContext notion() {
		NotionContext _localctx = new NotionContext(Context, State);
		EnterRule(_localctx, 78, RULE_notion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 272;
				Match(STRING);
				}
				}
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(RslBisParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(RslBisParser.STRING, i);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 80, RULE_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 277;
				Match(STRING);
				}
				}
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RslBisParser.NUMBER, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 82, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			Match(NUMBER);
			State = 283;
			Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltlabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(RslBisParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RslBisParser.NUMBER, 0); }
		public AltlabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altlabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltlabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltlabelContext altlabel() {
		AltlabelContext _localctx = new AltlabelContext(Context, State);
		EnterRule(_localctx, 84, RULE_altlabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(CHAR);
			State = 286;
			Match(NUMBER);
			State = 287;
			Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,32,290,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		1,0,4,0,88,8,0,11,0,12,0,89,1,0,5,0,93,8,0,10,0,12,0,96,9,0,1,0,1,0,1,
		1,1,1,1,1,1,1,3,1,104,8,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,3,3,113,8,3,1,4,
		4,4,116,8,4,11,4,12,4,117,1,4,1,4,4,4,122,8,4,11,4,12,4,123,3,4,126,8,
		4,1,5,1,5,3,5,130,8,5,1,5,1,5,1,5,1,6,1,6,3,6,137,8,6,1,7,1,7,1,7,1,7,
		1,7,1,8,1,8,3,8,146,8,8,1,9,1,9,3,9,150,8,9,1,10,1,10,3,10,154,8,10,1,
		11,1,11,3,11,158,8,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,3,13,167,8,13,
		1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,
		1,18,1,19,1,19,1,19,1,20,1,20,3,20,189,8,20,1,21,1,21,1,21,1,21,3,21,195,
		8,21,1,22,1,22,3,22,199,8,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,
		25,1,25,1,25,3,25,212,8,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,
		1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,3,31,233,8,31,1,32,1,
		32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,4,35,246,8,35,11,35,12,
		35,247,1,35,1,35,1,35,1,35,1,35,1,35,3,35,256,8,35,1,36,1,36,1,36,3,36,
		261,8,36,1,37,4,37,264,8,37,11,37,12,37,265,1,37,1,37,1,37,1,38,1,38,1,
		39,4,39,274,8,39,11,39,12,39,275,1,40,4,40,279,8,40,11,40,12,40,280,1,
		41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,0,0,43,0,2,4,6,8,10,12,14,16,18,
		20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
		68,70,72,74,76,78,80,82,84,0,1,1,0,24,26,276,0,87,1,0,0,0,2,99,1,0,0,0,
		4,105,1,0,0,0,6,109,1,0,0,0,8,115,1,0,0,0,10,127,1,0,0,0,12,134,1,0,0,
		0,14,138,1,0,0,0,16,143,1,0,0,0,18,147,1,0,0,0,20,153,1,0,0,0,22,157,1,
		0,0,0,24,159,1,0,0,0,26,163,1,0,0,0,28,168,1,0,0,0,30,172,1,0,0,0,32,175,
		1,0,0,0,34,177,1,0,0,0,36,180,1,0,0,0,38,183,1,0,0,0,40,188,1,0,0,0,42,
		190,1,0,0,0,44,198,1,0,0,0,46,200,1,0,0,0,48,203,1,0,0,0,50,211,1,0,0,
		0,52,213,1,0,0,0,54,216,1,0,0,0,56,219,1,0,0,0,58,222,1,0,0,0,60,225,1,
		0,0,0,62,228,1,0,0,0,64,234,1,0,0,0,66,237,1,0,0,0,68,240,1,0,0,0,70,243,
		1,0,0,0,72,257,1,0,0,0,74,263,1,0,0,0,76,270,1,0,0,0,78,273,1,0,0,0,80,
		278,1,0,0,0,82,282,1,0,0,0,84,285,1,0,0,0,86,88,3,2,1,0,87,86,1,0,0,0,
		88,89,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,94,1,0,0,0,91,93,3,70,35,
		0,92,91,1,0,0,0,93,96,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,97,1,0,0,
		0,96,94,1,0,0,0,97,98,5,0,0,1,98,1,1,0,0,0,99,100,5,1,0,0,100,101,3,80,
		40,0,101,103,3,10,5,0,102,104,3,12,6,0,103,102,1,0,0,0,103,104,1,0,0,0,
		104,3,1,0,0,0,105,106,5,2,0,0,106,107,3,6,3,0,107,108,5,3,0,0,108,5,1,
		0,0,0,109,112,3,8,4,0,110,111,5,4,0,0,111,113,3,6,3,0,112,110,1,0,0,0,
		112,113,1,0,0,0,113,7,1,0,0,0,114,116,5,30,0,0,115,114,1,0,0,0,116,117,
		1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,125,1,0,0,0,119,121,5,5,0,
		0,120,122,5,30,0,0,121,120,1,0,0,0,122,123,1,0,0,0,123,121,1,0,0,0,123,
		124,1,0,0,0,124,126,1,0,0,0,125,119,1,0,0,0,125,126,1,0,0,0,126,9,1,0,
		0,0,127,129,5,6,0,0,128,130,3,4,2,0,129,128,1,0,0,0,129,130,1,0,0,0,130,
		131,1,0,0,0,131,132,3,16,8,0,132,133,3,26,13,0,133,11,1,0,0,0,134,136,
		3,14,7,0,135,137,3,12,6,0,136,135,1,0,0,0,136,137,1,0,0,0,137,13,1,0,0,
		0,138,139,5,7,0,0,139,140,3,34,17,0,140,141,3,18,9,0,141,142,3,26,13,0,
		142,15,1,0,0,0,143,145,3,20,10,0,144,146,3,16,8,0,145,144,1,0,0,0,145,
		146,1,0,0,0,146,17,1,0,0,0,147,149,3,22,11,0,148,150,3,18,9,0,149,148,
		1,0,0,0,149,150,1,0,0,0,150,19,1,0,0,0,151,154,3,36,18,0,152,154,3,24,
		12,0,153,151,1,0,0,0,153,152,1,0,0,0,154,21,1,0,0,0,155,158,3,38,19,0,
		156,158,3,24,12,0,157,155,1,0,0,0,157,156,1,0,0,0,158,23,1,0,0,0,159,160,
		5,8,0,0,160,161,3,6,3,0,161,162,5,9,0,0,162,25,1,0,0,0,163,166,5,10,0,
		0,164,167,3,28,14,0,165,167,3,30,15,0,166,164,1,0,0,0,166,165,1,0,0,0,
		167,27,1,0,0,0,168,169,5,2,0,0,169,170,3,32,16,0,170,171,5,3,0,0,171,29,
		1,0,0,0,172,173,5,11,0,0,173,174,5,29,0,0,174,31,1,0,0,0,175,176,5,30,
		0,0,176,33,1,0,0,0,177,178,3,82,41,0,178,179,5,12,0,0,179,35,1,0,0,0,180,
		181,3,82,41,0,181,182,3,40,20,0,182,37,1,0,0,0,183,184,3,84,42,0,184,185,
		3,40,20,0,185,39,1,0,0,0,186,189,3,62,31,0,187,189,3,42,21,0,188,186,1,
		0,0,0,188,187,1,0,0,0,189,41,1,0,0,0,190,194,5,13,0,0,191,195,3,50,25,
		0,192,195,3,44,22,0,193,195,3,68,34,0,194,191,1,0,0,0,194,192,1,0,0,0,
		194,193,1,0,0,0,195,43,1,0,0,0,196,199,3,46,23,0,197,199,3,48,24,0,198,
		196,1,0,0,0,198,197,1,0,0,0,199,45,1,0,0,0,200,201,5,14,0,0,201,202,3,
		78,39,0,202,47,1,0,0,0,203,204,5,15,0,0,204,205,3,78,39,0,205,49,1,0,0,
		0,206,212,3,52,26,0,207,212,3,54,27,0,208,212,3,56,28,0,209,212,3,58,29,
		0,210,212,3,60,30,0,211,206,1,0,0,0,211,207,1,0,0,0,211,208,1,0,0,0,211,
		209,1,0,0,0,211,210,1,0,0,0,212,51,1,0,0,0,213,214,5,16,0,0,214,215,3,
		78,39,0,215,53,1,0,0,0,216,217,5,17,0,0,217,218,3,78,39,0,218,55,1,0,0,
		0,219,220,5,18,0,0,220,221,3,78,39,0,221,57,1,0,0,0,222,223,5,19,0,0,223,
		224,3,78,39,0,224,59,1,0,0,0,225,226,5,20,0,0,226,227,3,78,39,0,227,61,
		1,0,0,0,228,232,3,76,38,0,229,233,3,64,32,0,230,233,3,66,33,0,231,233,
		3,68,34,0,232,229,1,0,0,0,232,230,1,0,0,0,232,231,1,0,0,0,233,63,1,0,0,
		0,234,235,5,21,0,0,235,236,3,78,39,0,236,65,1,0,0,0,237,238,5,22,0,0,238,
		239,3,78,39,0,239,67,1,0,0,0,240,241,5,23,0,0,241,242,3,80,40,0,242,69,
		1,0,0,0,243,245,7,0,0,0,244,246,5,30,0,0,245,244,1,0,0,0,246,247,1,0,0,
		0,247,245,1,0,0,0,247,248,1,0,0,0,248,255,1,0,0,0,249,250,5,27,0,0,250,
		256,5,30,0,0,251,252,5,2,0,0,252,253,3,72,36,0,253,254,5,3,0,0,254,256,
		1,0,0,0,255,249,1,0,0,0,255,251,1,0,0,0,256,71,1,0,0,0,257,260,3,74,37,
		0,258,259,5,28,0,0,259,261,3,72,36,0,260,258,1,0,0,0,260,261,1,0,0,0,261,
		73,1,0,0,0,262,264,5,30,0,0,263,262,1,0,0,0,264,265,1,0,0,0,265,263,1,
		0,0,0,265,266,1,0,0,0,266,267,1,0,0,0,267,268,5,27,0,0,268,269,5,30,0,
		0,269,75,1,0,0,0,270,271,5,30,0,0,271,77,1,0,0,0,272,274,5,30,0,0,273,
		272,1,0,0,0,274,275,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,79,1,0,
		0,0,277,279,5,30,0,0,278,277,1,0,0,0,279,280,1,0,0,0,280,278,1,0,0,0,280,
		281,1,0,0,0,281,81,1,0,0,0,282,283,5,29,0,0,283,284,5,27,0,0,284,83,1,
		0,0,0,285,286,5,31,0,0,286,287,5,29,0,0,287,288,5,27,0,0,288,85,1,0,0,
		0,25,89,94,103,112,117,123,125,129,136,145,149,153,157,166,188,194,198,
		211,232,247,255,260,265,275,280
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
