//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/smial/MyRepos/rsl-bis/AntlrCSharp/RslBis.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class RslBisParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		NUMBER=39, CHAR=40, STRING=41, WS=42;
	public const int
		RULE_start = 0, RULE_usecase = 1, RULE_ucconditions = 2, RULE_conditions = 3, 
		RULE_condition = 4, RULE_contextcondition = 5, RULE_valuecondition = 6, 
		RULE_mainscenario = 7, RULE_scenarios = 8, RULE_scenario = 9, RULE_sentences = 10, 
		RULE_altsentences = 11, RULE_sentence = 12, RULE_altsentence = 13, RULE_condsentence = 14, 
		RULE_endsentence = 15, RULE_resultsentence = 16, RULE_rejoinsentence = 17, 
		RULE_result = 18, RULE_repsentence = 19, RULE_svosentence = 20, RULE_altsvosentence = 21, 
		RULE_step = 22, RULE_systemstep = 23, RULE_toactorpredicate = 24, RULE_showpredicate = 25, 
		RULE_closepredicate = 26, RULE_tosystempredicate = 27, RULE_readpredicate = 28, 
		RULE_updatepredicate = 29, RULE_deletepredicate = 30, RULE_checkpredicate = 31, 
		RULE_executepredicate = 32, RULE_userstep = 33, RULE_selectpredicate = 34, 
		RULE_enterpredicate = 35, RULE_invoke = 36, RULE_notiondef = 37, RULE_viewnotion = 38, 
		RULE_viewtype = 39, RULE_triggernotion = 40, RULE_triggertype = 41, RULE_namesandlabels = 42, 
		RULE_datanotion = 43, RULE_attributes = 44, RULE_attribute = 45, RULE_multnotion = 46, 
		RULE_datatype = 47, RULE_actor = 48, RULE_notion = 49, RULE_value = 50, 
		RULE_name = 51, RULE_uilabel = 52, RULE_label = 53, RULE_altlabel = 54, 
		RULE_labelref = 55;
	public static readonly string[] ruleNames = {
		"start", "usecase", "ucconditions", "conditions", "condition", "contextcondition", 
		"valuecondition", "mainscenario", "scenarios", "scenario", "sentences", 
		"altsentences", "sentence", "altsentence", "condsentence", "endsentence", 
		"resultsentence", "rejoinsentence", "result", "repsentence", "svosentence", 
		"altsvosentence", "step", "systemstep", "toactorpredicate", "showpredicate", 
		"closepredicate", "tosystempredicate", "readpredicate", "updatepredicate", 
		"deletepredicate", "checkpredicate", "executepredicate", "userstep", "selectpredicate", 
		"enterpredicate", "invoke", "notiondef", "viewnotion", "viewtype", "triggernotion", 
		"triggertype", "namesandlabels", "datanotion", "attributes", "attribute", 
		"multnotion", "datatype", "actor", "notion", "value", "name", "uilabel", 
		"label", "altlabel", "labelref"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Use case'", "'{'", "'}'", "';'", "'user'", "'?'", "'Main scenario'", 
		"'Scenario'", "'['", "']'", "'->'", "'end'", "'!'", "'rejoin'", "'-\"-'", 
		"'System'", "'<show>'", "'<close>'", "'<read>'", "'<update>'", "'<delete>'", 
		"'<check>'", "'<execute>'", "'<select>'", "'<enter>'", "'<invoke>'", "'View'", 
		"'*'", "'Trigger'", "','", "'Data'", "':'", "'integer'", "'float'", "'text'", 
		"'boolean'", "'time'", "'date'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "NUMBER", "CHAR", "STRING", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RslBis.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RslBisParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RslBisParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RslBisParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RslBisParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsecaseContext[] usecase() {
			return GetRuleContexts<UsecaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsecaseContext usecase(int i) {
			return GetRuleContext<UsecaseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotiondefContext[] notiondef() {
			return GetRuleContexts<NotiondefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotiondefContext notiondef(int i) {
			return GetRuleContext<NotiondefContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 112;
				usecase();
				}
				}
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 );
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2818572288L) != 0)) {
				{
				{
				State = 117;
				notiondef();
				}
				}
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 123;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsecaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainscenarioContext mainscenario() {
			return GetRuleContext<MainscenarioContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScenariosContext scenarios() {
			return GetRuleContext<ScenariosContext>(0);
		}
		public UsecaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usecase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsecase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsecaseContext usecase() {
		UsecaseContext _localctx = new UsecaseContext(Context, State);
		EnterRule(_localctx, 2, RULE_usecase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(T__0);
			State = 126;
			name();
			State = 127;
			mainscenario();
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 128;
				scenarios();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UcconditionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionsContext conditions() {
			return GetRuleContext<ConditionsContext>(0);
		}
		public UcconditionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ucconditions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUcconditions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UcconditionsContext ucconditions() {
		UcconditionsContext _localctx = new UcconditionsContext(Context, State);
		EnterRule(_localctx, 4, RULE_ucconditions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(T__1);
			State = 132;
			conditions();
			State = 133;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionsContext conditions() {
			return GetRuleContext<ConditionsContext>(0);
		}
		public ConditionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionsContext conditions() {
		ConditionsContext _localctx = new ConditionsContext(Context, State);
		EnterRule(_localctx, 6, RULE_conditions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			condition();
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 136;
				Match(T__3);
				State = 137;
				conditions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueconditionContext valuecondition() {
			return GetRuleContext<ValueconditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContextconditionContext contextcondition() {
			return GetRuleContext<ContextconditionContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 8, RULE_condition);
		try {
			State = 142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 140;
				valuecondition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 141;
				contextcondition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContextconditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public ContextconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contextcondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContextcondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContextconditionContext contextcondition() {
		ContextconditionContext _localctx = new ContextconditionContext(Context, State);
		EnterRule(_localctx, 10, RULE_contextcondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueconditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public ValueconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valuecondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValuecondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueconditionContext valuecondition() {
		ValueconditionContext _localctx = new ValueconditionContext(Context, State);
		EnterRule(_localctx, 12, RULE_valuecondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				{
				State = 146;
				Match(T__4);
				}
				break;
			case STRING:
				{
				State = 147;
				notion();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 150;
			Match(T__5);
			State = 151;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainscenarioContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SentencesContext sentences() {
			return GetRuleContext<SentencesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndsentenceContext endsentence() {
			return GetRuleContext<EndsentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UcconditionsContext ucconditions() {
			return GetRuleContext<UcconditionsContext>(0);
		}
		public MainscenarioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainscenario; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainscenario(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainscenarioContext mainscenario() {
		MainscenarioContext _localctx = new MainscenarioContext(Context, State);
		EnterRule(_localctx, 14, RULE_mainscenario);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(T__6);
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 154;
				ucconditions();
				}
			}

			State = 157;
			sentences();
			State = 158;
			endsentence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScenariosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScenarioContext scenario() {
			return GetRuleContext<ScenarioContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScenariosContext scenarios() {
			return GetRuleContext<ScenariosContext>(0);
		}
		public ScenariosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scenarios; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScenarios(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScenariosContext scenarios() {
		ScenariosContext _localctx = new ScenariosContext(Context, State);
		EnterRule(_localctx, 16, RULE_scenarios);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			scenario();
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 161;
				scenarios();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScenarioContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RepsentenceContext repsentence() {
			return GetRuleContext<RepsentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltsentencesContext altsentences() {
			return GetRuleContext<AltsentencesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndsentenceContext endsentence() {
			return GetRuleContext<EndsentenceContext>(0);
		}
		public ScenarioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scenario; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScenario(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScenarioContext scenario() {
		ScenarioContext _localctx = new ScenarioContext(Context, State);
		EnterRule(_localctx, 18, RULE_scenario);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			Match(T__7);
			State = 165;
			repsentence();
			State = 166;
			altsentences();
			State = 167;
			endsentence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SentencesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SentenceContext sentence() {
			return GetRuleContext<SentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentencesContext sentences() {
			return GetRuleContext<SentencesContext>(0);
		}
		public SentencesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sentences; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentences(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SentencesContext sentences() {
		SentencesContext _localctx = new SentencesContext(Context, State);
		EnterRule(_localctx, 20, RULE_sentences);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			sentence();
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8 || _la==NUMBER) {
				{
				State = 170;
				sentences();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltsentencesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AltsentenceContext altsentence() {
			return GetRuleContext<AltsentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltsentencesContext altsentences() {
			return GetRuleContext<AltsentencesContext>(0);
		}
		public AltsentencesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altsentences; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltsentences(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltsentencesContext altsentences() {
		AltsentencesContext _localctx = new AltsentencesContext(Context, State);
		EnterRule(_localctx, 22, RULE_altsentences);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			altsentence();
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8 || _la==CHAR) {
				{
				State = 174;
				altsentences();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SvosentenceContext svosentence() {
			return GetRuleContext<SvosentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondsentenceContext condsentence() {
			return GetRuleContext<CondsentenceContext>(0);
		}
		public SentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SentenceContext sentence() {
		SentenceContext _localctx = new SentenceContext(Context, State);
		EnterRule(_localctx, 24, RULE_sentence);
		try {
			State = 179;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 177;
				svosentence();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 178;
				condsentence();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltsentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AltsvosentenceContext altsvosentence() {
			return GetRuleContext<AltsvosentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondsentenceContext condsentence() {
			return GetRuleContext<CondsentenceContext>(0);
		}
		public AltsentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altsentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltsentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltsentenceContext altsentence() {
		AltsentenceContext _localctx = new AltsentenceContext(Context, State);
		EnterRule(_localctx, 26, RULE_altsentence);
		try {
			State = 183;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 181;
				altsvosentence();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 182;
				condsentence();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondsentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionsContext conditions() {
			return GetRuleContext<ConditionsContext>(0);
		}
		public CondsentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condsentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondsentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondsentenceContext condsentence() {
		CondsentenceContext _localctx = new CondsentenceContext(Context, State);
		EnterRule(_localctx, 28, RULE_condsentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			Match(T__8);
			State = 186;
			conditions();
			State = 187;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndsentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResultsentenceContext resultsentence() {
			return GetRuleContext<ResultsentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RejoinsentenceContext rejoinsentence() {
			return GetRuleContext<RejoinsentenceContext>(0);
		}
		public EndsentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endsentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndsentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndsentenceContext endsentence() {
		EndsentenceContext _localctx = new EndsentenceContext(Context, State);
		EnterRule(_localctx, 30, RULE_endsentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			Match(T__10);
			State = 192;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				{
				State = 190;
				resultsentence();
				}
				break;
			case T__13:
				{
				State = 191;
				rejoinsentence();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultsentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ResultsentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resultsentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResultsentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResultsentenceContext resultsentence() {
		ResultsentenceContext _localctx = new ResultsentenceContext(Context, State);
		EnterRule(_localctx, 32, RULE_resultsentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(T__11);
			State = 195;
			Match(T__12);
			State = 196;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RejoinsentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelrefContext labelref() {
			return GetRuleContext<LabelrefContext>(0);
		}
		public RejoinsentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rejoinsentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRejoinsentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RejoinsentenceContext rejoinsentence() {
		RejoinsentenceContext _localctx = new RejoinsentenceContext(Context, State);
		EnterRule(_localctx, 34, RULE_rejoinsentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(T__13);
			State = 199;
			labelref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RslBisParser.STRING, 0); }
		public ResultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResultContext result() {
		ResultContext _localctx = new ResultContext(Context, State);
		EnterRule(_localctx, 36, RULE_result);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepsentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltlabelContext altlabel() {
			return GetRuleContext<AltlabelContext>(0);
		}
		public RepsentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repsentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepsentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepsentenceContext repsentence() {
		RepsentenceContext _localctx = new RepsentenceContext(Context, State);
		EnterRule(_localctx, 38, RULE_repsentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 203;
				label();
				}
				break;
			case CHAR:
				{
				State = 204;
				altlabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 207;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SvosentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StepContext step() {
			return GetRuleContext<StepContext>(0);
		}
		public SvosentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_svosentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSvosentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SvosentenceContext svosentence() {
		SvosentenceContext _localctx = new SvosentenceContext(Context, State);
		EnterRule(_localctx, 40, RULE_svosentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			label();
			State = 210;
			step();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltsvosentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AltlabelContext altlabel() {
			return GetRuleContext<AltlabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StepContext step() {
			return GetRuleContext<StepContext>(0);
		}
		public AltsvosentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altsvosentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltsvosentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltsvosentenceContext altsvosentence() {
		AltsvosentenceContext _localctx = new AltsvosentenceContext(Context, State);
		EnterRule(_localctx, 42, RULE_altsvosentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			altlabel();
			State = 213;
			step();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StepContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserstepContext userstep() {
			return GetRuleContext<UserstepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SystemstepContext systemstep() {
			return GetRuleContext<SystemstepContext>(0);
		}
		public StepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_step; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StepContext step() {
		StepContext _localctx = new StepContext(Context, State);
		EnterRule(_localctx, 44, RULE_step);
		try {
			State = 217;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 215;
				userstep();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 216;
				systemstep();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SystemstepContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TosystempredicateContext tosystempredicate() {
			return GetRuleContext<TosystempredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ToactorpredicateContext toactorpredicate() {
			return GetRuleContext<ToactorpredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvokeContext invoke() {
			return GetRuleContext<InvokeContext>(0);
		}
		public SystemstepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_systemstep; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSystemstep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SystemstepContext systemstep() {
		SystemstepContext _localctx = new SystemstepContext(Context, State);
		EnterRule(_localctx, 46, RULE_systemstep);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(T__15);
			State = 223;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
				{
				State = 220;
				tosystempredicate();
				}
				break;
			case T__16:
			case T__17:
				{
				State = 221;
				toactorpredicate();
				}
				break;
			case T__25:
				{
				State = 222;
				invoke();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ToactorpredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShowpredicateContext showpredicate() {
			return GetRuleContext<ShowpredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClosepredicateContext closepredicate() {
			return GetRuleContext<ClosepredicateContext>(0);
		}
		public ToactorpredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_toactorpredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToactorpredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ToactorpredicateContext toactorpredicate() {
		ToactorpredicateContext _localctx = new ToactorpredicateContext(Context, State);
		EnterRule(_localctx, 48, RULE_toactorpredicate);
		try {
			State = 227;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__16:
				EnterOuterAlt(_localctx, 1);
				{
				State = 225;
				showpredicate();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 2);
				{
				State = 226;
				closepredicate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowpredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public ShowpredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showpredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowpredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowpredicateContext showpredicate() {
		ShowpredicateContext _localctx = new ShowpredicateContext(Context, State);
		EnterRule(_localctx, 50, RULE_showpredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			Match(T__16);
			State = 230;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClosepredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public ClosepredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closepredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosepredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClosepredicateContext closepredicate() {
		ClosepredicateContext _localctx = new ClosepredicateContext(Context, State);
		EnterRule(_localctx, 52, RULE_closepredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			Match(T__17);
			State = 233;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TosystempredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReadpredicateContext readpredicate() {
			return GetRuleContext<ReadpredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatepredicateContext updatepredicate() {
			return GetRuleContext<UpdatepredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeletepredicateContext deletepredicate() {
			return GetRuleContext<DeletepredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckpredicateContext checkpredicate() {
			return GetRuleContext<CheckpredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecutepredicateContext executepredicate() {
			return GetRuleContext<ExecutepredicateContext>(0);
		}
		public TosystempredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tosystempredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTosystempredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TosystempredicateContext tosystempredicate() {
		TosystempredicateContext _localctx = new TosystempredicateContext(Context, State);
		EnterRule(_localctx, 54, RULE_tosystempredicate);
		try {
			State = 240;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__18:
				EnterOuterAlt(_localctx, 1);
				{
				State = 235;
				readpredicate();
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 2);
				{
				State = 236;
				updatepredicate();
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 3);
				{
				State = 237;
				deletepredicate();
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 4);
				{
				State = 238;
				checkpredicate();
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 5);
				{
				State = 239;
				executepredicate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadpredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public ReadpredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readpredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadpredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadpredicateContext readpredicate() {
		ReadpredicateContext _localctx = new ReadpredicateContext(Context, State);
		EnterRule(_localctx, 56, RULE_readpredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(T__18);
			State = 243;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdatepredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public UpdatepredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updatepredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdatepredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdatepredicateContext updatepredicate() {
		UpdatepredicateContext _localctx = new UpdatepredicateContext(Context, State);
		EnterRule(_localctx, 58, RULE_updatepredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			Match(T__19);
			State = 246;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeletepredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public DeletepredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deletepredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeletepredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeletepredicateContext deletepredicate() {
		DeletepredicateContext _localctx = new DeletepredicateContext(Context, State);
		EnterRule(_localctx, 60, RULE_deletepredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			Match(T__20);
			State = 249;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckpredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public CheckpredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkpredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckpredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckpredicateContext checkpredicate() {
		CheckpredicateContext _localctx = new CheckpredicateContext(Context, State);
		EnterRule(_localctx, 62, RULE_checkpredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(T__21);
			State = 252;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecutepredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public ExecutepredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executepredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecutepredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecutepredicateContext executepredicate() {
		ExecutepredicateContext _localctx = new ExecutepredicateContext(Context, State);
		EnterRule(_localctx, 64, RULE_executepredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			Match(T__22);
			State = 255;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserstepContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActorContext actor() {
			return GetRuleContext<ActorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectpredicateContext selectpredicate() {
			return GetRuleContext<SelectpredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnterpredicateContext enterpredicate() {
			return GetRuleContext<EnterpredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvokeContext invoke() {
			return GetRuleContext<InvokeContext>(0);
		}
		public UserstepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userstep; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserstep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserstepContext userstep() {
		UserstepContext _localctx = new UserstepContext(Context, State);
		EnterRule(_localctx, 66, RULE_userstep);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			actor();
			State = 261;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__23:
				{
				State = 258;
				selectpredicate();
				}
				break;
			case T__24:
				{
				State = 259;
				enterpredicate();
				}
				break;
			case T__25:
				{
				State = 260;
				invoke();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectpredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public SelectpredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectpredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectpredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectpredicateContext selectpredicate() {
		SelectpredicateContext _localctx = new SelectpredicateContext(Context, State);
		EnterRule(_localctx, 68, RULE_selectpredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			Match(T__23);
			State = 264;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnterpredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public EnterpredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enterpredicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnterpredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnterpredicateContext enterpredicate() {
		EnterpredicateContext _localctx = new EnterpredicateContext(Context, State);
		EnterRule(_localctx, 70, RULE_enterpredicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			Match(T__24);
			State = 267;
			notion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvokeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public InvokeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invoke; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvoke(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvokeContext invoke() {
		InvokeContext _localctx = new InvokeContext(Context, State);
		EnterRule(_localctx, 72, RULE_invoke);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			Match(T__25);
			State = 270;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotiondefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ViewnotionContext viewnotion() {
			return GetRuleContext<ViewnotionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggernotionContext triggernotion() {
			return GetRuleContext<TriggernotionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatanotionContext datanotion() {
			return GetRuleContext<DatanotionContext>(0);
		}
		public NotiondefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notiondef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotiondef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotiondefContext notiondef() {
		NotiondefContext _localctx = new NotiondefContext(Context, State);
		EnterRule(_localctx, 74, RULE_notiondef);
		try {
			State = 275;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__26:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272;
				viewnotion();
				}
				break;
			case T__28:
				EnterOuterAlt(_localctx, 2);
				{
				State = 273;
				triggernotion();
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 3);
				{
				State = 274;
				datanotion();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewnotionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ViewtypeContext viewtype() {
			return GetRuleContext<ViewtypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamesandlabelsContext namesandlabels() {
			return GetRuleContext<NamesandlabelsContext>(0);
		}
		public ViewnotionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewnotion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewnotion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewnotionContext viewnotion() {
		ViewnotionContext _localctx = new ViewnotionContext(Context, State);
		EnterRule(_localctx, 76, RULE_viewnotion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			Match(T__26);
			State = 278;
			Match(T__27);
			State = 279;
			viewtype();
			State = 280;
			Match(T__27);
			State = 281;
			namesandlabels();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewtypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RslBisParser.STRING, 0); }
		public ViewtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewtype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewtypeContext viewtype() {
		ViewtypeContext _localctx = new ViewtypeContext(Context, State);
		EnterRule(_localctx, 78, RULE_viewtype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggernotionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamesandlabelsContext namesandlabels() {
			return GetRuleContext<NamesandlabelsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggertypeContext triggertype() {
			return GetRuleContext<TriggertypeContext>(0);
		}
		public TriggernotionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggernotion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriggernotion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriggernotionContext triggernotion() {
		TriggernotionContext _localctx = new TriggernotionContext(Context, State);
		EnterRule(_localctx, 80, RULE_triggernotion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(T__28);
			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__27) {
				{
				State = 286;
				Match(T__27);
				State = 287;
				triggertype();
				State = 288;
				Match(T__27);
				}
			}

			State = 292;
			namesandlabels();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggertypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RslBisParser.STRING, 0); }
		public TriggertypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggertype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriggertype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TriggertypeContext triggertype() {
		TriggertypeContext _localctx = new TriggertypeContext(Context, State);
		EnterRule(_localctx, 82, RULE_triggertype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamesandlabelsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UilabelContext uilabel() {
			return GetRuleContext<UilabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamesandlabelsContext namesandlabels() {
			return GetRuleContext<NamesandlabelsContext>(0);
		}
		public NamesandlabelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namesandlabels; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamesandlabels(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamesandlabelsContext namesandlabels() {
		NamesandlabelsContext _localctx = new NamesandlabelsContext(Context, State);
		EnterRule(_localctx, 84, RULE_namesandlabels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			name();
			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 297;
				Match(T__1);
				State = 298;
				uilabel();
				State = 299;
				Match(T__2);
				}
			}

			State = 305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 303;
				Match(T__29);
				State = 304;
				namesandlabels();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatanotionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public DatanotionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datanotion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatanotion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatanotionContext datanotion() {
		DatanotionContext _localctx = new DatanotionContext(Context, State);
		EnterRule(_localctx, 86, RULE_datanotion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			Match(T__30);
			State = 308;
			name();
			State = 309;
			Match(T__1);
			State = 310;
			attributes();
			State = 311;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(Context, State);
		EnterRule(_localctx, 88, RULE_attributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			attribute();
			State = 316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 314;
				Match(T__29);
				State = 315;
				attributes();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultnotionContext multnotion() {
			return GetRuleContext<MultnotionContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 90, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			name();
			State = 319;
			Match(T__31);
			State = 323;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
				{
				State = 320;
				datatype();
				}
				break;
			case STRING:
				{
				State = 321;
				notion();
				}
				break;
			case T__8:
				{
				State = 322;
				multnotion();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultnotionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotionContext notion() {
			return GetRuleContext<NotionContext>(0);
		}
		public MultnotionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multnotion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultnotion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultnotionContext multnotion() {
		MultnotionContext _localctx = new MultnotionContext(Context, State);
		EnterRule(_localctx, 92, RULE_multnotion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			Match(T__8);
			State = 326;
			notion();
			State = 327;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatatypeContext : ParserRuleContext {
		public DatatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatatype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatatypeContext datatype() {
		DatatypeContext _localctx = new DatatypeContext(Context, State);
		EnterRule(_localctx, 94, RULE_datatype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 541165879296L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RslBisParser.STRING, 0); }
		public ActorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActorContext actor() {
		ActorContext _localctx = new ActorContext(Context, State);
		EnterRule(_localctx, 96, RULE_actor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(RslBisParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(RslBisParser.STRING, i);
		}
		public NotionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotionContext notion() {
		NotionContext _localctx = new NotionContext(Context, State);
		EnterRule(_localctx, 98, RULE_notion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 333;
				Match(STRING);
				}
				}
				State = 336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(RslBisParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(RslBisParser.STRING, i);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 100, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 338;
				Match(STRING);
				}
				}
				State = 341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(RslBisParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(RslBisParser.STRING, i);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 102, RULE_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 343;
				Match(STRING);
				}
				}
				State = 346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UilabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(RslBisParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(RslBisParser.STRING, i);
		}
		public UilabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uilabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUilabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UilabelContext uilabel() {
		UilabelContext _localctx = new UilabelContext(Context, State);
		EnterRule(_localctx, 104, RULE_uilabel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 348;
				Match(STRING);
				}
				}
				State = 351;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RslBisParser.NUMBER, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 106, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			Match(NUMBER);
			State = 354;
			Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltlabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(RslBisParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RslBisParser.NUMBER, 0); }
		public AltlabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altlabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltlabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltlabelContext altlabel() {
		AltlabelContext _localctx = new AltlabelContext(Context, State);
		EnterRule(_localctx, 108, RULE_altlabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			Match(CHAR);
			State = 357;
			Match(NUMBER);
			State = 358;
			Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelrefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RslBisParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(RslBisParser.CHAR, 0); }
		public LabelrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRslBisVisitor<TResult> typedVisitor = visitor as IRslBisVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelrefContext labelref() {
		LabelrefContext _localctx = new LabelrefContext(Context, State);
		EnterRule(_localctx, 110, RULE_labelref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHAR) {
				{
				State = 360;
				Match(CHAR);
				}
			}

			State = 363;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,42,366,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,1,0,4,0,114,
		8,0,11,0,12,0,115,1,0,5,0,119,8,0,10,0,12,0,122,9,0,1,0,1,0,1,1,1,1,1,
		1,1,1,3,1,130,8,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,3,3,139,8,3,1,4,1,4,3,4,
		143,8,4,1,5,1,5,1,6,1,6,3,6,149,8,6,1,6,1,6,1,6,1,7,1,7,3,7,156,8,7,1,
		7,1,7,1,7,1,8,1,8,3,8,163,8,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,3,10,172,8,
		10,1,11,1,11,3,11,176,8,11,1,12,1,12,3,12,180,8,12,1,13,1,13,3,13,184,
		8,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,3,15,193,8,15,1,16,1,16,1,16,1,
		16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,3,19,206,8,19,1,19,1,19,1,20,1,20,
		1,20,1,21,1,21,1,21,1,22,1,22,3,22,218,8,22,1,23,1,23,1,23,1,23,3,23,224,
		8,23,1,24,1,24,3,24,228,8,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,
		27,1,27,1,27,3,27,241,8,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,
		1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,3,33,262,8,33,1,34,1,
		34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,3,37,276,8,37,1,38,
		1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,40,1,40,3,40,291,8,
		40,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,42,1,42,3,42,302,8,42,1,42,1,42,
		3,42,306,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,3,44,317,8,
		44,1,45,1,45,1,45,1,45,1,45,3,45,324,8,45,1,46,1,46,1,46,1,46,1,47,1,47,
		1,48,1,48,1,49,4,49,335,8,49,11,49,12,49,336,1,50,4,50,340,8,50,11,50,
		12,50,341,1,51,4,51,345,8,51,11,51,12,51,346,1,52,4,52,350,8,52,11,52,
		12,52,351,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,55,3,55,362,8,55,1,55,1,
		55,1,55,0,0,56,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
		88,90,92,94,96,98,100,102,104,106,108,110,0,1,1,0,33,38,346,0,113,1,0,
		0,0,2,125,1,0,0,0,4,131,1,0,0,0,6,135,1,0,0,0,8,142,1,0,0,0,10,144,1,0,
		0,0,12,148,1,0,0,0,14,153,1,0,0,0,16,160,1,0,0,0,18,164,1,0,0,0,20,169,
		1,0,0,0,22,173,1,0,0,0,24,179,1,0,0,0,26,183,1,0,0,0,28,185,1,0,0,0,30,
		189,1,0,0,0,32,194,1,0,0,0,34,198,1,0,0,0,36,201,1,0,0,0,38,205,1,0,0,
		0,40,209,1,0,0,0,42,212,1,0,0,0,44,217,1,0,0,0,46,219,1,0,0,0,48,227,1,
		0,0,0,50,229,1,0,0,0,52,232,1,0,0,0,54,240,1,0,0,0,56,242,1,0,0,0,58,245,
		1,0,0,0,60,248,1,0,0,0,62,251,1,0,0,0,64,254,1,0,0,0,66,257,1,0,0,0,68,
		263,1,0,0,0,70,266,1,0,0,0,72,269,1,0,0,0,74,275,1,0,0,0,76,277,1,0,0,
		0,78,283,1,0,0,0,80,285,1,0,0,0,82,294,1,0,0,0,84,296,1,0,0,0,86,307,1,
		0,0,0,88,313,1,0,0,0,90,318,1,0,0,0,92,325,1,0,0,0,94,329,1,0,0,0,96,331,
		1,0,0,0,98,334,1,0,0,0,100,339,1,0,0,0,102,344,1,0,0,0,104,349,1,0,0,0,
		106,353,1,0,0,0,108,356,1,0,0,0,110,361,1,0,0,0,112,114,3,2,1,0,113,112,
		1,0,0,0,114,115,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,120,1,0,0,
		0,117,119,3,74,37,0,118,117,1,0,0,0,119,122,1,0,0,0,120,118,1,0,0,0,120,
		121,1,0,0,0,121,123,1,0,0,0,122,120,1,0,0,0,123,124,5,0,0,1,124,1,1,0,
		0,0,125,126,5,1,0,0,126,127,3,102,51,0,127,129,3,14,7,0,128,130,3,16,8,
		0,129,128,1,0,0,0,129,130,1,0,0,0,130,3,1,0,0,0,131,132,5,2,0,0,132,133,
		3,6,3,0,133,134,5,3,0,0,134,5,1,0,0,0,135,138,3,8,4,0,136,137,5,4,0,0,
		137,139,3,6,3,0,138,136,1,0,0,0,138,139,1,0,0,0,139,7,1,0,0,0,140,143,
		3,12,6,0,141,143,3,10,5,0,142,140,1,0,0,0,142,141,1,0,0,0,143,9,1,0,0,
		0,144,145,3,98,49,0,145,11,1,0,0,0,146,149,5,5,0,0,147,149,3,98,49,0,148,
		146,1,0,0,0,148,147,1,0,0,0,149,150,1,0,0,0,150,151,5,6,0,0,151,152,3,
		100,50,0,152,13,1,0,0,0,153,155,5,7,0,0,154,156,3,4,2,0,155,154,1,0,0,
		0,155,156,1,0,0,0,156,157,1,0,0,0,157,158,3,20,10,0,158,159,3,30,15,0,
		159,15,1,0,0,0,160,162,3,18,9,0,161,163,3,16,8,0,162,161,1,0,0,0,162,163,
		1,0,0,0,163,17,1,0,0,0,164,165,5,8,0,0,165,166,3,38,19,0,166,167,3,22,
		11,0,167,168,3,30,15,0,168,19,1,0,0,0,169,171,3,24,12,0,170,172,3,20,10,
		0,171,170,1,0,0,0,171,172,1,0,0,0,172,21,1,0,0,0,173,175,3,26,13,0,174,
		176,3,22,11,0,175,174,1,0,0,0,175,176,1,0,0,0,176,23,1,0,0,0,177,180,3,
		40,20,0,178,180,3,28,14,0,179,177,1,0,0,0,179,178,1,0,0,0,180,25,1,0,0,
		0,181,184,3,42,21,0,182,184,3,28,14,0,183,181,1,0,0,0,183,182,1,0,0,0,
		184,27,1,0,0,0,185,186,5,9,0,0,186,187,3,6,3,0,187,188,5,10,0,0,188,29,
		1,0,0,0,189,192,5,11,0,0,190,193,3,32,16,0,191,193,3,34,17,0,192,190,1,
		0,0,0,192,191,1,0,0,0,193,31,1,0,0,0,194,195,5,12,0,0,195,196,5,13,0,0,
		196,197,3,100,50,0,197,33,1,0,0,0,198,199,5,14,0,0,199,200,3,110,55,0,
		200,35,1,0,0,0,201,202,5,41,0,0,202,37,1,0,0,0,203,206,3,106,53,0,204,
		206,3,108,54,0,205,203,1,0,0,0,205,204,1,0,0,0,206,207,1,0,0,0,207,208,
		5,15,0,0,208,39,1,0,0,0,209,210,3,106,53,0,210,211,3,44,22,0,211,41,1,
		0,0,0,212,213,3,108,54,0,213,214,3,44,22,0,214,43,1,0,0,0,215,218,3,66,
		33,0,216,218,3,46,23,0,217,215,1,0,0,0,217,216,1,0,0,0,218,45,1,0,0,0,
		219,223,5,16,0,0,220,224,3,54,27,0,221,224,3,48,24,0,222,224,3,72,36,0,
		223,220,1,0,0,0,223,221,1,0,0,0,223,222,1,0,0,0,224,47,1,0,0,0,225,228,
		3,50,25,0,226,228,3,52,26,0,227,225,1,0,0,0,227,226,1,0,0,0,228,49,1,0,
		0,0,229,230,5,17,0,0,230,231,3,98,49,0,231,51,1,0,0,0,232,233,5,18,0,0,
		233,234,3,98,49,0,234,53,1,0,0,0,235,241,3,56,28,0,236,241,3,58,29,0,237,
		241,3,60,30,0,238,241,3,62,31,0,239,241,3,64,32,0,240,235,1,0,0,0,240,
		236,1,0,0,0,240,237,1,0,0,0,240,238,1,0,0,0,240,239,1,0,0,0,241,55,1,0,
		0,0,242,243,5,19,0,0,243,244,3,98,49,0,244,57,1,0,0,0,245,246,5,20,0,0,
		246,247,3,98,49,0,247,59,1,0,0,0,248,249,5,21,0,0,249,250,3,98,49,0,250,
		61,1,0,0,0,251,252,5,22,0,0,252,253,3,98,49,0,253,63,1,0,0,0,254,255,5,
		23,0,0,255,256,3,98,49,0,256,65,1,0,0,0,257,261,3,96,48,0,258,262,3,68,
		34,0,259,262,3,70,35,0,260,262,3,72,36,0,261,258,1,0,0,0,261,259,1,0,0,
		0,261,260,1,0,0,0,262,67,1,0,0,0,263,264,5,24,0,0,264,265,3,98,49,0,265,
		69,1,0,0,0,266,267,5,25,0,0,267,268,3,98,49,0,268,71,1,0,0,0,269,270,5,
		26,0,0,270,271,3,102,51,0,271,73,1,0,0,0,272,276,3,76,38,0,273,276,3,80,
		40,0,274,276,3,86,43,0,275,272,1,0,0,0,275,273,1,0,0,0,275,274,1,0,0,0,
		276,75,1,0,0,0,277,278,5,27,0,0,278,279,5,28,0,0,279,280,3,78,39,0,280,
		281,5,28,0,0,281,282,3,84,42,0,282,77,1,0,0,0,283,284,5,41,0,0,284,79,
		1,0,0,0,285,290,5,29,0,0,286,287,5,28,0,0,287,288,3,82,41,0,288,289,5,
		28,0,0,289,291,1,0,0,0,290,286,1,0,0,0,290,291,1,0,0,0,291,292,1,0,0,0,
		292,293,3,84,42,0,293,81,1,0,0,0,294,295,5,41,0,0,295,83,1,0,0,0,296,301,
		3,102,51,0,297,298,5,2,0,0,298,299,3,104,52,0,299,300,5,3,0,0,300,302,
		1,0,0,0,301,297,1,0,0,0,301,302,1,0,0,0,302,305,1,0,0,0,303,304,5,30,0,
		0,304,306,3,84,42,0,305,303,1,0,0,0,305,306,1,0,0,0,306,85,1,0,0,0,307,
		308,5,31,0,0,308,309,3,102,51,0,309,310,5,2,0,0,310,311,3,88,44,0,311,
		312,5,3,0,0,312,87,1,0,0,0,313,316,3,90,45,0,314,315,5,30,0,0,315,317,
		3,88,44,0,316,314,1,0,0,0,316,317,1,0,0,0,317,89,1,0,0,0,318,319,3,102,
		51,0,319,323,5,32,0,0,320,324,3,94,47,0,321,324,3,98,49,0,322,324,3,92,
		46,0,323,320,1,0,0,0,323,321,1,0,0,0,323,322,1,0,0,0,324,91,1,0,0,0,325,
		326,5,9,0,0,326,327,3,98,49,0,327,328,5,10,0,0,328,93,1,0,0,0,329,330,
		7,0,0,0,330,95,1,0,0,0,331,332,5,41,0,0,332,97,1,0,0,0,333,335,5,41,0,
		0,334,333,1,0,0,0,335,336,1,0,0,0,336,334,1,0,0,0,336,337,1,0,0,0,337,
		99,1,0,0,0,338,340,5,41,0,0,339,338,1,0,0,0,340,341,1,0,0,0,341,339,1,
		0,0,0,341,342,1,0,0,0,342,101,1,0,0,0,343,345,5,41,0,0,344,343,1,0,0,0,
		345,346,1,0,0,0,346,344,1,0,0,0,346,347,1,0,0,0,347,103,1,0,0,0,348,350,
		5,41,0,0,349,348,1,0,0,0,350,351,1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,
		0,352,105,1,0,0,0,353,354,5,39,0,0,354,355,5,32,0,0,355,107,1,0,0,0,356,
		357,5,40,0,0,357,358,5,39,0,0,358,359,5,32,0,0,359,109,1,0,0,0,360,362,
		5,40,0,0,361,360,1,0,0,0,361,362,1,0,0,0,362,363,1,0,0,0,363,364,5,39,
		0,0,364,111,1,0,0,0,30,115,120,129,138,142,148,155,162,171,175,179,183,
		192,205,217,223,227,240,261,275,290,301,305,316,323,336,341,346,351,361
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
